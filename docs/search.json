[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open Data sources",
    "section": "",
    "text": "1 Introduction\nOpen Data is powerful concept that embodies freedom. Freedom of choice, access to information, and, after processing — the attainment of knowledge. It grants us the ability to gain insights into the world around us and understand the processes occurring within it. The accessibility of data also signifies the capacity to discover connections between disparate pieces of information and seamlessly integrate them.\nThese few chapters aim to illustrate the availability and possibilities of working with open data, particularly focusing on spatial data.\nThe book may have a focus on R (R Core Team 2023), however in certain cases I have attempted to show alternative methods for obtaining and working with data. But, to be candid: in my humble opinion R stands out as a holy grail in the realm of data mining, wrangling, and visualization. With quarto (or bookdown/rmarkdown/latex) as the backbone, it provides fantastic environment not only to exploring data but also for sharing the output. What’s even more crucial is its reproducibility. This implies that when you play with provided examples, you should achieve the same (or at least very similar results). Keep in mind that OpenStreetMap which is used to acquire spatial data in chapter Chapter 2 is growing every day (with around 4 million map changes per day according to wiki) and some data might have already changed or become obsolete.\n\n\n\n\n\n\nWork in progress\n\n\n\nThis manual is a work in progress.\n\n\nChapter 2 covers the different types of spatial data available from OpenStreetMap. From different kind of borders to roads. From assessing the bike and electrical grid infrastructure to routing and isochrones.\nChapter 3 describes environmental data sets available: the land cover and land use data sources are described in Section 3.1, different climate variables for gridded and stations data sets are covered in Section 3.2.\n\n\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "osm.html",
    "href": "osm.html",
    "title": "2  OpenStreetMap as a universal spatial data source",
    "section": "",
    "text": "2.1 Data access and available formats\nThere are several ways to access the OpenStreetMap data. The entire planet data, currently approximately 73 GB in a binary (packed) PBF file, can be downloaded from planet.osm (“Planet OSM” 2024). Alternatively, smaller snapshots can be obtained from GeoFabrik.de or BBBike.org. Those sources provide data in OSM XML and/or PBF formats. Subsequently, tools like osm2pgsql can be used to import the data into Postgresql/PostGIS database, osmosis for data manipulation and filtering, or QGIS for direct processing.\nFor those seeking direct access to the data, the Overpass API is available with Overpass Turbo serving as a front-end where users can build and execute the queries instantly. Further details about data access are described on the wiki.\nTo access OSM spatial data from R, there are several libraries available. The {osmextract} (Gilardi and Lovelace 2023) library enables the download and import data extracts, for instance, from GeoFabrik. Additionally, the {osmdata} package (Mark Padgham et al. 2017) can be utilized, which leverages the Overpass API to import data as Simple Features {sf} or Spatial Objects {sp}.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>OpenStreetMap as a universal spatial data source</span>"
    ]
  },
  {
    "objectID": "osm.html#data-access-and-available-formats",
    "href": "osm.html#data-access-and-available-formats",
    "title": "2  OpenStreetMap as a universal spatial data source",
    "section": "",
    "text": "2.1.1 osmextract\nAs the name suggest, the package allows you to search, download and process the data extracts available online. Per default it uses 3 providers:\n\nosmextract::oe_providers()\n\nCheck the corresponding help pages to read more details about the fields in each database (e.g. ?geofabrik_zones).\n\n\n  available_providers          database_name number_of_zones number_of_fields\n1           geofabrik        geofabrik_zones             475                8\n2              bbbike           bbbike_zones             236                5\n3    openstreetmap_fr openstreetmap_fr_zones            1135                6\n\n\nEach of these providers has a specific set of areas, for example BBBike.org offers data sets for the biggest cities around the globe, while GeoFabrik.de and openstreetmap.fr cover the entire world. Figure 2.2 visualizes the areas covered by these providers. The typical workflow consists of few steps:\n\nFind the area of interest by matching it with one of the files/areas stored by providers using oe_match();\nDownload the .pbf file with oe_download();\nConvert the .pbf file to .gpkg file with oe_vectortranslate();\nRead the data using oe_read() function.\n\nSection 2.2.3.2 shows an example of {osmextract} usage for postal code areas around Leipzig, Germany.\n\n\n\n\n\n\n\n\n\n\n\n(a) BBBike.org\n\n\n\n\n\n\n\n\n\n\n\n(b) GeoFabrik.de\n\n\n\n\n\n\n\n\n\n\n\n(c) openstreetmap.fr\n\n\n\n\n\n\n\nFigure 2.2: Area covered by different providers.\n\n\n\n\n\n2.1.2 osmdata\nThe {osmdata} package enables the construction of a query to retrieve data from Overpass server. The initial step involves creating a bounding box around the geographical area of interest. The getbb() function serves as a helper; it queries the Nominatim service for coordinates and downloads the bounding box for the specified location, as demonstrated in our example with the Czech Republic.\n\nb &lt;- osmdata::getbb(\"Czech Republic\")\n\nBy default it returns a data in matrix form, like:\n\n\n       min      max\nx 12.09058 18.85925\ny 48.55181 51.05569\n\n\nThe subsequent step involves generating an Overpass query using the opq() function, which searches for requested features within the specified bounding box. By utilizing add_osm_feature() function and specifying key-value pairs, we narrow down the search criteria. In our example, we focus on administrative boundaries at the 2nd level (corresponding to countries) and further narrow it to Czechia. The pipe |&gt; functions as the AND operator in the query.\n\nosm &lt;- osmdata::opq(bbox = b, timeout = 60 * 20) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::add_osm_feature(key = \"admin_level\", value = \"2\") |&gt;\n  osmdata::add_osm_feature(key = \"name:en\", value = \"Czechia\") |&gt;\n  osmdata::osmdata_sf()\n\nThe OSM data set is extensive as Overpass returns all points, (multi)lines and (multi)polygons that are ‘touched’ by the query. Upon examining the osm object returned, we observe the details: 125 k points, 1 k linestrings and 1 multipolygon which constitutes the country.\nObject of class 'osmdata' with:\n               $bbox : 48.5518081,12.0905752,51.0556945,18.8592538\n      $overpass_call : The call submitted to the overpass API\n               $meta : metadata including timestamp and version numbers\n         $osm_points : 'sf' Simple Features Collection with 125030 points\n          $osm_lines : 'sf' Simple Features Collection with 1009 linestrings\n       $osm_polygons : 'sf' Simple Features Collection with 0 polygons\n     $osm_multilines : NULL\n  $osm_multipolygons : 'sf' Simple Features Collection with 1 multipolygons\nEach variable contain particular set of features like points, (multi)lines or (multi)polygons. We can access them directly using osm$osm_... like:\n\nosm$osm_points |&gt;\n  head(2) |&gt;\n  subset(select = c(\"osm_id\", \"name\", \"geometry\"))\n\nSimple feature collection with 2 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 13.04717 ymin: 49.26365 xmax: 14.23419 ymax: 50.88782\nGeodetic CRS:  WGS 84\n           osm_id                                        name\n27300178 27300178                          Schmilka - Hřensko\n28310825 28310825 Hraniční přechod Svatá Kateřina - Rittsteig\n                          geometry\n27300178 POINT (14.23419 50.88782)\n28310825 POINT (13.04717 49.26365)\n\n\nCorresponding Overpass query for Czech Republic boundary looks like:\n[out:json][timeout:25];\n  relation[boundary=administrative]\n  [admin_level=2][\"name:en\"='Czechia'];\nout geom;",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>OpenStreetMap as a universal spatial data source</span>"
    ]
  },
  {
    "objectID": "osm.html#boundaries",
    "href": "osm.html#boundaries",
    "title": "2  OpenStreetMap as a universal spatial data source",
    "section": "2.2 Boundaries",
    "text": "2.2 Boundaries\n\n2.2.1 Administrative boundaries\nLet’s proceed with our straightforward example of OSM-based spatial data: administrative boundaries. Typically, administrative areas are depicted as polygons, with their geometries highlighted by color or the shape of their borders. The examples of administrative borders are illustrated in the Figure 2.3.\n\n\n\n\n\n\n\n\nBoder between Germany and Poland, on Polish auto map, 1937\n\n\n\n\n\n\n\nBoders in Serbia, Chorvatia and Slovenia, 1924\n\n\n\n\n\n\nFigure 2.3: Examples of country boundaries on different maps, source: Archiwum Map WIG 1919-1939\n\n\n\nThere are several openly available datasets that offer administrative boundaries, such as world country polygons from the {spData} package (Bivand, Nowosad, and Lovelace 2023), Natural Earth2 accessible via {rnaturalearthdata} package (South 2017), {geodata} (Hijmans et al. 2023), etc. For those who like point-and-click, there is a osm-boundaries.com service, where you can pick the boundaries and download it in few different formats including GeoJSON. Figure 2.4 displays few sets of freely available boundary data for a section of the Czech Republic boundary. You may observe a significant difference between these lines and the administrative boundary from the OpenStreetMap map layer below. Despite both datasets being prepared based on OSM data, they have undergone simplification. Please exercise caution when selecting your data set and utilize it judiciously.\n\nCode\ndata(\"World\", package = \"tmap\")\n\nc &lt;- World |&gt;\n  subset(iso_a3 == \"CZE\")\n\ncze &lt;- geodata::gadm(\"CZE\", level = 0, path = \"data\") |&gt;\n  sf::st_as_sf()\n\nb_box &lt;- sf::st_bbox(c(xmin = 16, ymin = 50.1, xmax = 17.2, ymax = 50.6),\n  crs = \"EPSG:4326\"\n)\n\ntmap::tmap_mode(\"plot\")\n\ntmpl &lt;- tmap::tm_shape(c, bbox = b_box) +\n  tmap::tm_lines(col = \"orange\", lwd = 2) +\n  tmap::tm_basemap(\"OpenStreetMap\") +\n  tmap::tm_shape(cze) +\n  tmap::tm_lines(col = \"blue\", lwd = 2)\n\ntmpl\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.4: Different boundary lines shown on OSM background: World data set from {tmap} package (Tennekes 2018) in orange and Czech Republic administrative boundary data from GADM by {geodata} package in blue.\n\n\n\nLet’s add the data extracted with {osmdata} to our previous plot:\n\nCode\nosm &lt;- osm |&gt;\n  osmdata::unname_osmdata_sf()\n\nd &lt;- osm$osm_multipolygons |&gt;\n  subset(select = c(\"name\", \"geometry\")) \n  \ntmpl +\n  tmap::tm_shape(d) +\n  tmap::tm_lines(col = \"darkgreen\", lwd = 2) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.5: And with Czech Republic boundary based on OpenStreetMap data (green).\n\n\n\nPlease note the distinction. It’s worth highlighting that the boundary obtained from the geodata::gadm() function is quite close to the original OSM line. Sometimes, simplicity translates to quicker outcomes. The choice of which data set to use depends entirely on the intended purpose and the desired level of accuracy.\nIt’s important to note that there are countries, such as Italy, whose borders incorporate territorial waters.\n\nCode\nit_bbox &lt;- osmdata::getbb(\"Italy\")\nit &lt;- osmdata::opq(bbox = it_bbox, timeout = 60*20) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::add_osm_feature(key = \"admin_level\", value = \"2\") |&gt;\n  osmdata::add_osm_feature(key = \"name:en\", value = \"Italy\") |&gt;\n  osmdata::osmdata_sf() |&gt;\n  osmdata::unname_osmdata_sf()\n\nit_border &lt;- it$osm_multipolygons |&gt;\n  subset(name == \"Italia\")\n\ntmap::tm_shape(it_border) +\n  tmap::tm_basemap(\"OpenStreetMap\") +\n  tmap::tm_borders(lwd = 2, col = \"orange\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.6: Border of the Italy including territorial waters\n\n\n\nIf there is a requirement to preserve landmass only boundaries, a useful ‘trick’ is to download lower-level areas and then combine them. For example:\n\nit_regions &lt;- osmdata::opq(bbox = it_bbox, timeout = 60*20) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::add_osm_feature(key = \"admin_level\", value = \"4\") |&gt;\n  osmdata::add_osm_feature(key = \"ISO3166-2\", value = \"IT\", value_exact = FALSE) |&gt;\n  osmdata::osmdata_sf() |&gt;\n  osmdata::unname_osmdata_sf()\n\nit_land &lt;- it_regions$osm_multipolygons |&gt;\n  subset(admin_level == 4, select = c(\"name\")) |&gt;\n  sf::st_union() |&gt;\n  sf::st_sf()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.7: Italy land border created with gluing the lower administrative boundaries with st_union().\n\n\n\n\n\nOverpass query\n    [out:json][timeout:25];\n    {{geocodeArea:Italy}};\n    relation[admin_level=4]\n      [boundary=administrative]\n      [\"ISO3166-2\"~\"IT-\"](area);\n    out geom;\nSuch trick will work for some countries like Italy, France or Spain, however it will not for all of them because their lower level boundaries may also include territorial waters like in Poland or Germany. For other countries you can try to use other admin_level (i.e. 7 for Greece will work). To deal with such issue one can use water polygons3 and subtract it from boundaries.\n\n\n2.2.2 Below country level\nSub-national borders like province, state, region, district, parish, municipality or any other country-specific administrative areas are marked with admin_level = 3 to 11. The details for almost all countries can be found on wiki, but there is a general pattern across OSM data:\n\n\n\n\nTable 2.1: General administrative levels of OSM boundaries\n\n\n\n\n\n\n\nadmin_level\nmeaning\n\n\n\n\n4\nprovinces, regions, prefectures\n\n\n6\ncounties, regions\n\n\n7\nmunicipalities, towns\n\n\n8-9\nvillages, parts of town\n\n\n\n\n\n\n\n\n\n\n\nThe geodata::gadm() function allows to get the administrative boundaries up to municipality level, like the below example for Poland:\n\npl &lt;- geodata::gadm(\"Poland\", level = 3, path = \"data\")\nterra::plot(pl[\"GID_3\"])\n\n\n\n\n\n\n\n\nBut what, if we want to go deeper with our analysis and look on single villages or even hamlets within one municipality? Let’s try it on municipality of Prusice, Lower Silesia, Poland. After getting the bounding box we are requesting boundary = administrative objects, regardless of its level. We will use admin_level to filter out boundaries of municipality as a whole and the villages which constitute it.\n\nb &lt;- osmdata::getbb(\"gmina Prusice\")\nprusice &lt;- osmdata::opq(bbox = b, timeout = 60*20) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::osmdata_sf()\n\nprusice_mun &lt;- prusice$osm_multipolygons |&gt;\n  subset(admin_level == 7 & name == \"gmina Prusice\") |&gt;\n  sf::st_transform(crs = \"EPSG:2180\")\n\nwillages &lt;- prusice$osm_multipolygons |&gt;\n  subset(admin_level == 8) |&gt;\n  sf::st_transform(crs = \"EPSG:2180\")\n\ntmap::tm_shape(willages) +\n  tmap::tm_grid(n.x = 5, n.y = 5, lwd = 0.5) +\n  tmap::tm_polygons(fill = \"gray95\") +\n  tmap::tm_shape(prusice_mun) +\n  tmap::tm_lines(lwd = 3, col = \"blue\")\n\n\n\n\n\n\n\n\nNot bad, however there is a lot of villages which surround the municipality. Please remember, the Overpass returns all features which intersects with query bounding box, including whole polygons. To get rid of those villages we will use sf::st_filter() function with st_within predicate to filter out only those villages, which are within municipality boundaries.\n\nwillages &lt;- prusice$osm_multipolygons |&gt;\n  subset(admin_level == 8) |&gt;\n  sf::st_transform(crs = \"EPSG:2180\") |&gt;\n  sf::st_filter(prusice_mun, .predicate=sf::st_within)\n\ntmap::tm_shape(willages) +\n  tmap::tm_grid(n.x = 5, n.y = 5, lwd = 0.5) +\n  tmap::tm_polygons(fill = \"gray95\") +\n  tmap::tm_text(text = \"name\", size = 0.7) +\n  tmap::tm_shape(prusice_mun) +\n  tmap::tm_lines(lwd = 3, col = \"blue\") \n\n\n\n\n\n\n\n\nOpenStreetMap data it’s not only spatial data base. It contain other information as well. For example, our boundaries of the villages are stored as a relation with ways as members. Additionally there might be admin_center pointing to node (point) which is marked as place = village or town with other tags, like:\n\nq &lt;- osmdata::opq(\"Kopaszyn\") |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::add_osm_feature(key = \"admin_level\", value = \"8\") |&gt;\n  osmdata::add_osm_feature(key = \"name\", value = \"Kopaszyn\")\n\na &lt;- q |&gt;\n  osmdata::osmdata_xml() \n\na|&gt;\n  xml2::xml_find_all(xpath = \".//node\") |&gt;\n  xml2::xml_children()\n\n{xml_nodeset (10)}\n [1] &lt;tag k=\"name\" v=\"Kopaszyn\"/&gt;\n [2] &lt;tag k=\"old_name:de\" v=\"Kapatschütz\"/&gt;\n [3] &lt;tag k=\"place\" v=\"village\"/&gt;\n [4] &lt;tag k=\"population\" v=\"146\"/&gt;\n [5] &lt;tag k=\"population:date\" v=\"2009\"/&gt;\n [6] &lt;tag k=\"postal_code\" v=\"55-110\"/&gt;\n [7] &lt;tag k=\"source:population\" v=\"GUS\"/&gt;\n [8] &lt;tag k=\"teryt:simc\" v=\"0879794\"/&gt;\n [9] &lt;tag k=\"wikidata\" v=\"Q6431018\"/&gt;\n[10] &lt;tag k=\"wikipedia\" v=\"pl:Kopaszyn (województwo dolnośląskie)\"/&gt;\n\n\nWe can see population, population:date and source:population among others. We can use them and run a simple analysis of population density in our municipality. But please be aware, the data might be a bit obsolete (as population:date indicates), and there might be better source of up-to date data, like national statistical office or Wikipedia/Wikidata.\n\nCode\nprusice_places &lt;- prusice$osm_points |&gt;\n  subset(place %in% c(\"village\", \"town\")) |&gt;\n  sf::st_transform(crs = \"EPSG:2180\")\n\nwillages &lt;- willages |&gt;\n  sf::st_join(prusice_places) |&gt;\n  subset(select = c(\"name.x\", \"population.y\", \"geometry\")) |&gt;\n  dplyr::mutate(area = sf::st_area(geometry),\n                population = as.numeric(population.y), \n                density = population / as.numeric(area/10^6))\n  \ntmap::tm_shape(willages) +\n  tmap::tm_polygons(fill = \"population\", \n                    fill.scale = tmap::tm_scale_continuous(values = \"Blues\"),\n                    fill.legend = tmap::tm_legend(title = \"Population\",\n                                                  position = c(0.3, 0.98),\n                                                  # position = c(\"center\", \"top\"),\n                                                  orientation = \"landscape\"))\n\ntmap::tm_shape(willages) +\n  tmap::tm_polygons(fill = \"density\", \n                    fill.scale = tmap::tm_scale_continuous(values = \"Blues\"),\n                    fill.legend = tmap::tm_legend(title = \"Density per sq. km\",\n                                                  position = c(0.3, 0.98),\n                                                  # position = c(\"center\", \"top\"),\n                                                  orientation = \"landscape\"))\n\n\n\n\n\n\n\n\n\n\n\n\n(a) population\n\n\n\n\n\n\n\n\n\n\n\n(b) population density\n\n\n\n\n\n\n\nFigure 2.8: Population and population density in Prusice municipality based on OSM data\n\n\n\nA very similar approach can be used for other administrative levels, like municipal arrondissements (subdivisions of the commune) of Paris, France, where boundaries are on admin_level=9 (Figure 2.9).\n\nCode\nparis_bbox &lt;- osmdata::getbb(\"Paris, France\")\nparis &lt;- osmdata::opq(bbox = paris_bbox, timeout = 60*20) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::add_osm_feature(key = \"admin_level\", value = \"9\") |&gt;\n  osmdata::osmdata_sf() |&gt;\n  osmdata::unname_osmdata_sf()\n\nparis &lt;- paris$osm_multipolygons |&gt;\n  subset(grepl(\"Paris\", name))\n\ntmap::tm_shape(paris) +\n  tmap::tm_basemap(\"Esri.WorldGrayCanvas\") +\n  tmap::tm_borders(col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.9: Arrondissements of Paris\n\n\n\n\n\nOverpass query\n[out:json][timeout:25];\n  {{geocodeArea:\"Paris, France\"}};\n  relation[admin_level=9]\n    [boundary=administrative](area);\nout geom;\n\n\n2.2.3 Other kind of boundaries\nIn addition to administrative boundaries, OpenStreetMap has other types of boundaries. They can be shortlisted using the osmdata::available_tags(\"boundary\") function. But to see the frequency of each tag, you can look at taginfo.\n\n\nCode\noptions(knitr.kable.NA = '')\n\na &lt;- jsonlite::read_json(\"https://taginfo.openstreetmap.org/api/4/key/values?key=boundary&filter=all&lang=en&sortname=count&sortorder=desc&rp=10&page=1\", simplifyVector = TRUE)\na$data |&gt;\n  subset(select = c(value, count, fraction, description)) |&gt;\n  kableExtra::kable(digits = 2, \n                    format.args = list(decimal.mark = \".\", big.mark = \"\")) |&gt;\n  kableExtra::kable_classic_2()\n\n\n\n\nTable 2.2: 10 most popular boundary= values in OpenStreetMap\n\n\n\n\n\n\n\nvalue\ncount\nfraction\ndescription\n\n\n\n\nadministrative\n2011827\n0.84\nAn administrative boundary recognised by governments for administrative purposes.\n\n\nprotected_area\n113754\n0.05\nUsed to mark boundaries of protected areas including national parks, wilderness, marine protection areas, heritage sites and other, similar areas.\n\n\npostal_code\n53164\n0.02\nA postal code boundary\n\n\ncensus\n24760\n0.01\nA census-designated boundary delineating a statistical area, not necessarily observable on the ground\n\n\nmarker\n21722\n0.01\nA physical marker that identifies a boundary\n\n\nlanduse\n16364\n0.01\n\n\n\nlocal_authority\n15884\n0.01\nDescribes the territory of a local authority\n\n\nforest_compartment\n14981\n0.01\nA marked subdivision of delimited forest, which is used for planning, management & navigation\n\n\npolitical\n13918\n0.01\nPolitical boundary, such as an electoral ward or parliamentary constituency\n\n\nhealth\n12756\n0.01\n\n\n\n\n\n\n\n\n\n\n\n\n\nProtected areas\nThe second most popular type of borders are the borders of protected areas: national parks, reserves and other areas of cultural importance. They are mapped as boundary = protected_area together with protect_class = 1 to 99; the first 6 values corresponds to categories introduced by International Union for Conservation of Nature (IUCN) like Strict Nature Reserve (IUCN Category Ia), Wilderness Area (IUCN Category Ib), National Park (IUCN Category II), etc. You can find the details on wiki. But please be aware there might be another tags combination used to map the boundaries of protected areas like boundary = national_park which corresponds to boundary = protected_area + protect_class = 2. In such case user has to extend the query, therefore in below example we will ask for all boundaries and filter it later using subset()4.\n\n\nCode\nperu &lt;- osmdata::opq(osmdata::getbb(\"Peru\"), timeout = 60*20) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::add_osm_feature(key = \"admin_level\", value = \"2\") |&gt;\n  osmdata::add_osm_feature(key = \"name:en\", value = \"Peru\") |&gt;\n  osmdata::osmdata_sf() |&gt;\n  osmdata::unname_osmdata_sf()\n\nperu &lt;- peru$osm_multipolygons\n\nnat_parks &lt;- osmdata::opq(sf::st_bbox(peru), timeout = 60*20) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\") |&gt;\n  osmdata::add_osm_feature(key = \"protect_class\", value = \"2\") |&gt;\n  osmdata::osmdata_sf() |&gt;\n  osmdata::unname_osmdata_sf()\n\nnat_parks &lt;- nat_parks$osm_multipolygons |&gt;\n  sf::st_filter(peru, .predicate=sf::st_within) |&gt;\n  subset(boundary %in% c(\"national_park\", \"protected_area\"))\n\ntmap::tm_shape(nat_parks) +\n  tmap::tm_basemap() +\n  tmap::tm_borders(col = \"darkgreen\", lwd = 2) +\n  tmap::tm_credits(\"(C) OpenStreetMap contributors\", position =  c(0,0))\n\n\n\n\n\n\n\n\nFigure 2.10: National parks in Peru\n\n\n\n\n\nUsing a bit of mathematics we can calculate the areas of those parks and arrange them accordingly. In the code below we convert the units from m2 to km2 using set_units() function from {units} package (Pebesma, Mailund, and Hiebert 2016).\n\nnat_parks &lt;- nat_parks |&gt;\n  dplyr::mutate(area = sf::st_area(geometry))\n\nnat_parks$area &lt;- units::set_units(nat_parks$area, km^2)\n\n\n\n\n\nNational parks in Peru with their area\n\n\nname\narea [km2]\n\n\n\n\nParque Nacional Alto Purús\n25 175\n\n\nParque Nacional del Manu\n17 054\n\n\nParque Nacional Sierra del Divisor\n13 622\n\n\nParque Nacional Cordillera Azul\n13 596\n\n\nParque Nacional Bahuaja Sonene\n10 981\n\n\nParque Nacional Yaguas\n8 720\n\n\nParque Nacional Huascarán\n3 411\n\n\nParque Nacional Otishi\n3 072\n\n\nParque Nacional Río Abiseo\n2 755\n\n\nParque Nacional Güeppi-Sekime\n2 049\n\n\nParque Nacional Cerros de Amotape\n1 525\n\n\nParque Nacional Yanachaga-Chemillén\n1 139\n\n\nParque Nacional Ichigkat muja - Cordillera del Cóndor\n899\n\n\nParque Nacional de Cutervo\n82\n\n\nParque Nacional Tingo María\n48\n\n\n\n\n\n\n\n\nLet’s have a look a bit deeper what kind of information is associated with those parks in OSM by displaying all column names:\n\n\n [1] \"osm_id\"                 \"name\"                   \"alt_name\"              \n [4] \"area\"                   \"boundary\"               \"boundary_type\"         \n [7] \"comment\"                \"description\"            \"dog\"                   \n[10] \"ethnic_group\"           \"fixme\"                  \"governance_type\"       \n[13] \"heritage\"               \"heritage:operator\"      \"heritage:website\"      \n[16] \"iba_code\"               \"is_in:country\"          \"iucn_level\"            \n[19] \"leisure\"                \"name:ar\"                \"name:cb\"               \n[22] \"name:ceb\"               \"name:de\"                \"name:en\"               \n[25] \"name:es\"                \"name:eu\"                \"name:fr\"               \n[28] \"name:gl\"                \"name:id\"                \"name:it\"               \n[31] \"name:ja\"                \"name:nl\"                \"name:pt\"               \n[34] \"name:qu\"                \"name:ru\"                \"name:sv\"               \n[37] \"name:zh\"                \"name:zh-Hans\"           \"norma_creacion\"        \n[40] \"note\"                   \"official_name\"          \"old_name\"              \n[43] \"operator\"               \"operator:short\"         \"operator:wikidata\"     \n[46] \"ownership\"              \"protect_class\"          \"protect_id\"            \n[49] \"protection_object\"      \"protection_title\"       \"ramsar\"                \n[52] \"ramsar_no\"              \"ref:CNUC\"               \"ref:sernap\"            \n[55] \"ref:whc\"                \"related_law\"            \"short_name\"            \n[58] \"short_protection_title\" \"site_ownership\"         \"site_status\"           \n[61] \"source\"                 \"source:date\"            \"start_date\"            \n[64] \"type\"                   \"url\"                    \"website\"               \n[67] \"whc:criteria\"           \"whc:inscription_date\"   \"wikidata\"              \n[70] \"wikipedia\"              \"wikipedia:de\"           \"wikipedia:es\"          \n[73] \"wikipedia:qu\"           \"geometry\"              \n\n\nLet’s take the Parque Nacional Alto Purús as an example and display some of those fields.\n\nnat_parks |&gt;\n  subset(name == \"Parque Nacional Alto Purús\") |&gt;\n  subset(select = c(\"short_name\", \"operator\", \"related_law\", \n                    \"start_date\", \"wikipedia\", \"wikidata\")) |&gt;\n  sf::st_drop_geometry() |&gt;\n  kableExtra::kable(row.names = FALSE) |&gt;\n  kableExtra::kable_classic_2()\n\n\n\nTable 2.3: Some details about Parque Nacional Alto Purús from OpenStreetMap data\n\n\n\n\n\n\n\nshort_name\noperator\nrelated_law\nstart_date\nwikipedia\nwikidata\n\n\n\n\nAlto Purús\nSERNANP\nD.S. N° 040-2004_AG.\n2004-11-18\nes:Parque nacional del Alto Purús\nQ2812162\n\n\n\n\n\n\n\n\n\n\n\nWith wikipedia field we can create link to Wikipedia article but let’s have a look on wikidata – it host Wikidata entry for our national park. Using {wikidataR} package (Shafee, Keyes, and Signorelli 2021) we can explore the information stored there. In first step we have to get information behind the item coded as Q2812162. Then we extract the image property (P18) for this item. In next step we build an URL to Wikimedia Commons to grab image, it’s attributes and display it.\n\nw &lt;- WikidataR::get_item(\"Q2812162\")\nx &lt;- WikidataR::extract_claims(w, \"P18\")\nwiki_image &lt;- x[[1]]$P18.x$mainsnak$datavalue$value |&gt;\n  stringr::str_replace_all(\" \", \"_\")\n\nurl &lt;- paste0(\"https://commons.wikimedia.org/wiki/File:\", wiki_image)\n\npage &lt;- xml2::read_html(url)\nimage &lt;- page |&gt;\n  xml2::xml_find_first(\"/html/body/div[3]/div[3]/div[5]/div[1]/div/span\") |&gt;\n  xml2::xml_child() |&gt;\n  xml2::xml_attr(\"href\")\n\nlicence &lt;- page |&gt;\n  xml2::xml_find_first(\"/html/body/div[3]/div[3]/div[5]/div[3]/div/div[2]/div/div[1]/div[2]/div/div[2]/div[2]/div[2]/div[1]\") |&gt;\n  xml2::xml_children() |&gt;\n  xml2::xml_text() |&gt;\n    paste(sep = \" \", collapse = \" \")\n\nlicence_link &lt;- page |&gt;\n  xml2::xml_find_first(\"/html/body/div[3]/div[3]/div[5]/div[3]/div/div[2]/div/div[1]/div[2]/div/div[2]/div[2]/div[2]/div[1]/a[2]\") |&gt;\n  xml2::xml_attr(\"href\")\n\nattribution &lt;- page |&gt;\n  xml2::xml_find_first(\"/html/body/div[3]/div[3]/div[5]/div[3]/div/div[2]/div/div[1]/div[2]/div/div[2]/div[2]/div[2]/div[2]/span\") |&gt;\n  xml2::xml_text()\n\n\n\n\nImage by FUERZA AÉREA DEL PERÚ, licence: Creative Commons Attribution 3.0 Unported\n\n\n\n\n\n\n\n\nNote\n\n\n\nHave you realized how easy is to combine data from 2 sources: OpenStreetMap and Wikipedia?\n\n\n\n\nPostal code areas\nPostal code boundaries are the third most common boundaries in OSM, however please be aware, that such information doesn’t exist in each country. Figure 2.11 displays the distribution of this tag — mostly used in Belgium, Germany, Vietnam and in few other spots across the globe.\n\n\n\n\n\n\nFigure 2.11: Postal code boundaries distribution, source: taginfo\n\n\n\nAs an example we will use {osmextract} to deal with data. Let say, we are interested in data set around Leipzig, Germany. First, we can check if any data provider offers such set.\n\nosmextract::oe_match(place = c(\"Leipzig\"))\n\nNo exact match found for place = Leipzig and provider = geofabrik. Best match is Belize. \nChecking the other providers.\n\n\nAn exact string match was found using provider = bbbike.\n\n\n$url\n[1] \"https://download.bbbike.org/osm/bbbike/Leipzig/Leipzig.osm.pbf\"\n\n$file_size\n[1] 41934061\n\n\nWe can download and preprocess it using oe_get() function. In this step the file is downloaded and all closed linestrings or relations are converted to layer with geometry type MULTIPOLYGON and stored in corresponding .gpkg file.\n\nl &lt;- osmextract::oe_get(\"Leipzig\", \n                   layer = \"multipolygons\",\n                   download_directory = \"data\")\n\nAs the layer contains 574267 different features (including land usage, buildings, parks, forests etc.) and it takes 703 Mb, it not necessary make sense to load it in whole. As we are interested in postal area boundaries, let utilize query= parameter and hstore_get_value() function.5\n\nl &lt;- osmextract::oe_read(\"data/bbbike_Leipzig.gpkg\", \n       query = \"SELECT osm_id, \n                   hstore_get_value(other_tags, 'postal_code') AS p_code,\n                   hstore_get_value(other_tags, 'postal_code_level') AS p_level,\n                   geometry \n                FROM multipolygons WHERE boundary = 'postal_code'\")\n\n\n\nSimple feature collection with 71 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 12.02171 ymin: 50.98035 xmax: 12.89833 ymax: 51.5876\nGeodetic CRS:  WGS 84\nFirst 10 features:\n    osm_id p_code p_level                       geometry\n1  1263641  04610       8 MULTIPOLYGON (((12.35531 51...\n2  1263646  04617       8 MULTIPOLYGON (((12.50344 51...\n3  1263648  04613       8 MULTIPOLYGON (((12.27817 51...\n4  1300367  04643       8 MULTIPOLYGON (((12.62641 51...\n5  1300368  04821       8 MULTIPOLYGON (((12.58278 51...\n6  1300369  04552       8 MULTIPOLYGON (((12.44659 51...\n7  1300371  04451       8 MULTIPOLYGON (((12.56898 51...\n8  1300374  04539       8 MULTIPOLYGON (((12.3752 51....\n9  1300375  04571       8 MULTIPOLYGON (((12.45343 51...\n10 1300376  04687       8 MULTIPOLYGON (((12.67303 51...\n\n\n\n\nCode\nl &lt;- l |&gt;\n  dplyr::mutate(post_prefix = substr(p_code, 1, 3))\n\ntmap::tm_shape(l) +\n  tmap::tm_polygons(fill = \"post_prefix\",\n                    fill.scale = tmap::tm_scale_categorical(values = \"Blues\"),\n                    fill.legend = tmap::tm_legend(title = \"Postal prefix\"))\n\n\n\n\n\n\n\n\nFigure 2.12: Postal prefixes in and around Lepizig\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAs stated previously, the post code areas are sparse and scattered. As an idea: we can collect the post code from addr:postcode tag assigned to places (osm_points or osm_(multi)polygons) and/or buildings/addresses then map it to lowest level of administrative boundary, however this may work for villages or small settlements. But assumption that postal areas corresponds somehow to administrative boundaries might be wrong. In bigger towns the post code may change from block to block. Other idea: having the addresses as POINT features one may try spatial kriging on them. Other method might be to use voronoi polygons.\n\n\nBelow an approach to add the postal codes to village boundaries using Wikidata as source.6\n\n\nCode\nadm_b &lt;- osmextract::oe_read(\"data/bbbike_Leipzig.gpkg\",\n  query = \"SELECT osm_id, boundary, admin_level, name, \n                  hstore_get_value(other_tags, 'postal_code') AS p_code, \n                  hstore_get_value(other_tags, 'wikidata') AS wikidata,\n                  geometry\n              FROM multipolygons\n              WHERE boundary = 'administrative'\"\n)\n\nadm_b &lt;- adm_b |&gt;\n  subset(admin_level %in% c(8:10) & is.na(p_code))\n\n\nThe function which grabs the data is based on {WikidataR} package:\n\nget_postal_code_from_wikidata &lt;- function(q = \"\") {\n  if (q != \"\" & !is.na(q)) {\n    w &lt;- WikidataR::get_item(q)\n    x &lt;- WikidataR::extract_claims(w, \"P281\")\n    if (length(x[[1]]$P281.x) &gt; 1) {\n      a &lt;- x[[1]]$P281.x$mainsnak$datavalue$value\n      if (length(a &gt; 1)) {\n        a &lt;- a |&gt;\n          paste0(str = \",\", collapse = \" \")\n      }\n    } else {\n      a &lt;- \"\"\n    }\n  } else {\n    a &lt;- \"\"\n  }\n  return(stringr::str_replace(a, \",$\", \"\"))\n}\n\nadm_b &lt;- adm_b |&gt;\n  dplyr::rowwise() |&gt;\n  dplyr::mutate(postal_code = get_postal_code_from_wikidata(wikidata))\n\n\n\n\n\nTable 2.4: Example of administrative areas with postal code assigned\n\n\n\n\n\n\n\nname\nadmin_level\npostal_code\n\n\n\n\nMarkkleeberg\n8\n04416\n\n\nGroßpösna\n8\n04463\n\n\nSeelitz\n8\n09306\n\n\nRochlitz\n8\n09306\n\n\nKönigsfeld\n8\n09306\n\n\nZettlitz\n8\n09306\n\n\nMarkranstädt\n8\n04420\n\n\nKitzen\n10\n04523\n\n\nPegau\n8\n04523\n\n\nElstertrebnitz\n8\n04523\n\n\nGroitzsch\n8\n04539\n\n\nRegis-Breitingen\n8\n04565\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.13: Administrative areas with postal codes from Wikidata, grouped by prefix",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>OpenStreetMap as a universal spatial data source</span>"
    ]
  },
  {
    "objectID": "osm.html#sec-land_coverage",
    "href": "osm.html#sec-land_coverage",
    "title": "2  OpenStreetMap as a universal spatial data source",
    "section": "2.3 Land coverage and use",
    "text": "2.3 Land coverage and use\nLand coverage (representation of physical surface on the Earth like grass, asphalt, trees, ground, water) and land use (how humans modified and managed the natural environment into arable fields, pastures or settlements) is another area where you can use OpenStreetMap data. In mid of 2010’s Jacinto Estima and Marco Painho investigated the coverage of OSM data in Portugal (Estima and Painho 2013, 2015), followed later by others (Schultz et al. 2017; Schott et al. 2022). Based on those works there is even an osmlanduse.org service build and hosted by Heidelberg Institute for Geoinformation Technology. Recently the topic was discussed by Fonte et al. (2019) where they compared OSM data with two European LULC products: the Urban Atlas and CORINE Land Cover.\nThe main keys which describes those features are natural and landuse. Table 2.5 shows the mapping between Corine Land Cover database and OSM data. Corine data was used in the past to map the surface of Europe, nowadays the data is replaced by other sources, mainly ortophoto maps, however the table gives a good overview of tag-value combinations for area mapping.\n\n\nCode\ntables &lt;- rvest::read_html(\"https://wiki.openstreetmap.org/wiki/Corine_Land_Cover\") |&gt;\n  rvest::html_table()\n\ntables[[1]] |&gt;\n  subset(select = c(Code, Description, Comment)) |&gt;\n  dplyr::mutate(\n    Comment = stringi::stri_replace_all_regex(\n      Comment, \n      pattern = \"([a-z]+)=([a-z]+)\", \n      replacement = glue::glue(\"\\`$1=$2\\`\")\n    )\n  )  |&gt;\n  kableExtra::kable() |&gt;\n  kableExtra::kable_classic_2()\n\n\n\n\nTable 2.5: Corine Land Cover classess and corresponding OpenStreetMap taging system. Source: wiki.\n\n\n\n\n\n\n\nCode\nDescription\nComment\n\n\n\n\n1\nArtificial surfaces\nArtificial surfaces\n\n\n1.1\nUrban fabric\nUrban fabric\n\n\n1.1.1\nContinuous urban fabric\n`landuse=residential`, `landuse=commercial`, `landuse=retail` and `landuse=industrial`\n\n\n1.1.2\nDiscontinuous urban fabric\n`landuse=residential`, `landuse=commercial`, `landuse=retail` and `landuse=industrial`\n\n\n1.2\nIndustrial, commercial and transport units\nIndustrial, commercial and transport units\n\n\n1.2.1\nIndustrial or commercial units\n`landuse=industrial`, `landuse=commercial`, or `landuse=retail`\n\n\n1.2.2\nRoad and rail networks and associated land\n`landuse=railway` for railway areas only. This class is a mix of road and rail landuse; `landuse=highway` is not commonly used.\n\n\n1.2.3\nPort areas\n`landuse=industrial` + `industrial=port` or `leisure=marina`\n\n\n1.2.4\nAirports\n`aeroway=aerodrome`\n\n\n1.3\nMine, dump and construction sites\nMine, dump and construction sites\n\n\n1.3.1\nMineral extraction sites\n`landuse=quarry`\n\n\n1.3.2\nDump sites\n`landuse=landfill`\n\n\n1.3.3\nConstruction sites\n`landuse=construction`\n\n\n1.4\nArtificial, non-agricultural vegetated areas\nArtificial, non-agricultural vegetated areas\n\n\n1.4.1\nGreen urban areas\nSeveral tags are possible: `leisure=park`, `leisure=garden`, `leisure=pitch`, `leisure=golf`_course,`landuse=grass`, `natural=wood`, and other tags\n\n\n1.4.2\nSport and leisure facilities\nSee leisure=* for the many possibilities.\n\n\n2\nAgricultural areas\nAgricultural areas\n\n\n2.1\nArable land\nArable land\n\n\n2.1.1\nNon-irrigated arable land\n`landuse=farmland`\n\n\n2.1.2\nPermanently irrigated land\n`landuse=farmland`\n\n\n2.1.3\nRice fields\n`landuse=farmland` + `crop=rice`\n\n\n2.2\nPermanent crops\nPermanent crops\n\n\n2.2.1\nVineyards\n`landuse=vineyard`\n\n\n2.2.2\nFruit trees and berry plantations\n`landuse=orchard`\n\n\n2.2.3\nOlive groves\n`landuse=orchard` + `trees=olive`_trees\n\n\n2.3\nPastures\nPastures\n\n\n2.3.1\nPastures\n`landuse=meadow`\n\n\n2.4\nHeterogeneous agricultural areas\nHeterogeneous agricultural areas\n\n\n2.4.1\nAnnual crops associated with permanent crops\nUsually but not always `landuse=farmland`\n\n\n2.4.2\nComplex cultivation patterns\nNo single tag, consider `landuse=farmland`, `landuse=meadow`, `landuse=orchard` and `landuse=farmyard` for specific areas.\n\n\n2.4.3\nLand principally occupied by agriculture, with significant areas of natural vegetation\nNo single tag, consider `landuse=farmland`, `landuse=meadow`, `landuse=orchard` and `landuse=farmyard` for specific agricultural areas, plus `natural=wood`, `natural=scrub`, etc. for natural areas.\n\n\n2.4.4\nAgro-forestry areas\n`landuse=forest`, `landuse=meadow`, `landuse=farmland` or a combination - requires survey.\n\n\n3\nForest and seminatural areas\nForest and seminatural areas\n\n\n3.1\nForests\nForests\n\n\n3.1.1\nBroad-leaved forest\n`landuse=forest` or `natural=wood` + leaf_`type=broadleaved`\n\n\n3.1.2\nConiferous forest\n`landuse=forest` or `natural=wood` + leaf_`type=needleleaved`\n\n\n3.1.3\nMixed forest\n`landuse=forest` or `natural=wood` + leaf_`type=mixed`\n\n\n3.2\nScrub and/or herbaceous vegetation associations\nScrub and/or herbaceous vegetation associations\n\n\n3.2.1\nNatural grasslands\n`natural=grassland`\n\n\n3.2.2\nMoors and heathland\n`natural=heath`\n\n\n3.2.3\nSclerophyllous vegetation\n`natural=scrub`\n\n\n3.2.4\nTransitional woodland-shrub\n`natural=wood` or `natural=scrub` + leaf_`type=mixed`\n\n\n3.3\nOpen spaces with little or no vegetation\nOpen spaces with little or no vegetation\n\n\n3.3.1\nBeaches, dunes, sands\n`natural=beach` or `natural=sand`\n\n\n3.3.2\nBare rocks\n`natural=rock`, `natural=scree` or `natural=shingle`\n\n\n3.3.3\nSparsely vegetated areas\nDepending on main features, see `natural=scrub`, `natural=heath`, `natural=grassland`, `natural=bare`_rock, `natural=sand`, `natural=scree`, etc.\n\n\n3.3.4\nBurnt areas\nN/A - not permanent.\n\n\n3.3.5\nGlaciers and perpetual snow\n`natural=glacier`\n\n\n4\nWetlands\nWetlands\n\n\n4.1\nInland wetlands\nInland wetlands\n\n\n4.1.1\nInland marshes\n`natural=wetland` + `wetland=marsh`\n\n\n4.1.2\nPeat bogs\n`natural=wetland` + `wetland=bog`\n\n\n4.2\nMaritime wetlands\nMaritime wetlands\n\n\n4.2.1\nSalt marshes\n`natural=wetland` + `wetland=saltmarsh`\n\n\n4.2.2\nSalines\n`landuse=salt`_pond (See Proposed features/Salt Pond )\n\n\n4.2.3\nIntertidal flats\n`wetland=tidalflat` or `tidal=yes` (See Proposed_features/Water_cover)\n\n\n5\nWater bodies\nWater bodies\n\n\n5.1\nInland waters\nInland waters\n\n\n5.1.1\nWater courses\n`waterway=riverbank`\n\n\n5.1.2\nWater bodies\n`natural=water` + `water=lake`\n\n\n5.2\nMarine waters\nMarine waters\n\n\n5.2.1\nCoastal lagoons\n`natural=water` + `water=lagoon` - also see `natural=coastline`\n\n\n5.2.2\nEstuaries\nNo compatible tag found\n\n\n5.2.3\nSea and ocean\nSee `natural=coastline`\n\n\n\n\n\n\n\n\n\n\n\nLet’s use already downloaded data set for Leipzig and see, what is there for land use.\n\nsf::st_read(\"data/bbbike_Leipzig.gpkg\", query = \"SELECT DISTINCT natural\n            FROM multipolygons WHERE natural != '' ORDER BY natural\") |&gt;\n  as.list()\n\nReading query `SELECT DISTINCT natural\n            FROM multipolygons WHERE natural != '' ORDER BY natural'\nfrom data source `/home/sapi/projekty/open_data/data/bbbike_Leipzig.gpkg' using driver `GPKG'\n\n\n$natural\n [1] \"bare_rock\"  \"basin\"      \"beach\"      \"bedrock\"    \"cliff\"     \n [6] \"floodplain\" \"grass\"      \"grassland\"  \"heath\"      \"mud\"       \n[11] \"pond\"       \"reef\"       \"ridge\"      \"rock\"       \"sand\"      \n[16] \"scree\"      \"scrub\"      \"shingle\"    \"shrubbery\"  \"stone\"     \n[21] \"tree_row\"   \"water\"      \"wetland\"    \"wood\"       \"yes\"       \n\nsf::st_read(\"data/bbbike_Leipzig.gpkg\", query = \"SELECT DISTINCT landuse\n            FROM multipolygons WHERE landuse != '' ORDER BY landuse\") |&gt;\n  as.list()\n\nReading query `SELECT DISTINCT landuse\n            FROM multipolygons WHERE landuse != '' ORDER BY landuse'\nfrom data source `/home/sapi/projekty/open_data/data/bbbike_Leipzig.gpkg' using driver `GPKG'\n\n\n$landuse\n [1] \"allotments\"              \"animal_keeping\"         \n [3] \"apiary\"                  \"aquaculture\"            \n [5] \"basin\"                   \"brownfield\"             \n [7] \"cemetery\"                \"churchyard\"             \n [9] \"city_green\"              \"civic_admin\"            \n[11] \"commercial\"              \"concrete\"               \n[13] \"construction\"            \"depot\"                  \n[15] \"education\"               \"emergency\"              \n[17] \"farmland\"                \"farmyard\"               \n[19] \"flowerbed\"               \"forest\"                 \n[21] \"garages\"                 \"garden\"                 \n[23] \"grass\"                   \"greenfield\"             \n[25] \"greenhouse_horticulture\" \"greenland\"              \n[27] \"highway\"                 \"industrial\"             \n[29] \"institutional\"           \"landfill\"               \n[31] \"meadow\"                  \"military\"               \n[33] \"orchard\"                 \"plant_nursery\"          \n[35] \"playground\"              \"proposed\"               \n[37] \"quarry\"                  \"railway\"                \n[39] \"recreation_ground\"       \"religious\"              \n[41] \"reservoir\"               \"residential\"            \n[43] \"retail\"                  \"road\"                   \n[45] \"storage\"                 \"street_green\"           \n[47] \"village_green\"           \"vineyard\"               \n\n\nYou may observe that a forest can be described as either natural = wood or landuse = forest so, it’s necessary to combine those pairs. Similarly, various classes of of industrial areas, such as industrial, commercial, construction etc., can be aggregated. It’s important to note that there might be instances boundary = forest_compartment (refer to Table 2.2), which should be examined and potentially included as well. The code chunk below is just one example of numerous possible ways to extract the information. Please note query = parameter, which queries the database in OGR dialect.\n\nsf::sf_use_s2(FALSE)\nlu &lt;- sf::st_read(\"data/bbbike_Leipzig.gpkg\",\n          query = \"SELECT osm_id, name, landuse, natural, 'forest' AS type, geometry \\\n                     FROM multipolygons \\\n                     WHERE landuse = 'forest' OR natural = 'wood' \\\n                   UNION \\\n                   SELECT osm_id, name, landuse, natural, 'residential' AS type, geometry \\\n                     FROM multipolygons \\\n                     WHERE landuse IN ('residential', 'education', 'religious') \\\n                   UNION \\\n                   SELECT osm_id, name, landuse, natural, 'commercial' AS type, geometry \\\n                     FROM multipolygons \\\n                     WHERE landuse IN ('industrial', 'commercial', 'construction')\") |&gt;\n  sf::st_make_valid() |&gt;\n  sf::st_transform(crs = \"EPSG:25832\") |&gt;\n  dplyr::group_by(type) |&gt;\n  dplyr::summarise()\n\n\n\n\n\n\n\n\n\nFigure 2.14: Example of land use around Leipzig, Germany\n\n\n\n\n\nA freely accessible global land cover product at 10 m resolution, based on Sentinel-1 and Sentinel-2 data, containing 11 land cover classes, is available online at https://esa-worldcover.org. More information in Section 3.1.1.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>OpenStreetMap as a universal spatial data source</span>"
    ]
  },
  {
    "objectID": "osm.html#where-the-streets-have-no-names",
    "href": "osm.html#where-the-streets-have-no-names",
    "title": "2  OpenStreetMap as a universal spatial data source",
    "section": "2.4 Where the streets have no names",
    "text": "2.4 Where the streets have no names\nStreets, roads or paths — all have highway key within OSM. The main road types, their values and meaning is shown in Table 2.6. Except those highways, there is a bunch of others like living_street pedestrian or just a track in forest — details are available on wiki. The OSM roads network data is probably most used data around the world. It’s a base for different navigation systems (including OSMAnd), for visualization of bus routes, it is also used in online games.\n\n\n\n\n\n\n\nTable 2.6: Roads and their coding values in OpenStreetMap data. Source: wiki\n\n\n\n\n\n\n\nKey\nValue\nComment\n\n\n\n\nhighway\nmotorway\nA restricted access major divided highway, normally with 2 or more running lanes plus emergency hard shoulder. Equivalent to the Freeway, Autobahn, etc..\n\n\nhighway\ntrunk\nThe most important roads in a country's system that aren't motorways. (Need not necessarily be a divided highway.)\n\n\nhighway\nprimary\nThe next most important roads in a country's system. (Often link larger towns.)\n\n\nhighway\nsecondary\nThe next most important roads in a country's system. (Often link towns.)\n\n\nhighway\ntertiary\nThe next most important roads in a country's system. (Often link smaller towns and villages)\n\n\nhighway\nunclassified\nThe least important through roads in a country's system – i.e. minor roads of a lower classification than tertiary, but which serve a purpose other than access to properties. (Often link villages and hamlets.) The word 'unclassified' is a historical artefact of the UK road system and does not mean that the classification is unknown; you can use highway=road for that.\n\n\nhighway\nresidential\nRoads which serve as an access to housing, without function of connecting settlements. Often lined with housing.\n\n\n\n\n\n\n\n\n\n\n\nLet’s extend Prusice municipality data with highways and see, what’s available.\n\nprusice_highways &lt;- osmdata::opq(b, timeout = 60) |&gt; \n  osmdata::add_osm_feature(key = \"highway\") |&gt;\n  osmdata::osmdata_sf()\n\nhighways &lt;- prusice_highways$osm_lines |&gt;\n  subset(!is.na(highway)) |&gt;\n  sf::st_transform(crs = \"EPSG:2180\") |&gt;\n  sf::st_intersection(prusice_mun)\n\nunique(highways$highway)\n\n [1] \"unclassified\"  \"residential\"   \"track\"         \"tertiary\"     \n [5] \"service\"       \"secondary\"     \"living_street\" \"footway\"      \n [9] \"trunk\"         \"pedestrian\"    \"path\"          \"cycleway\"     \n[13] \"trunk_link\"    \"steps\"         \"proposed\"     \n\n\nComparing with Table 2.6 we can see trunk and trunk_link as the main road categories, followed by secondary, tertiary, etc. Let’s add them to our map.\n\n\nCode\nh &lt;- highways |&gt;\n  subset(highway %in% c(\"trunk\", \"trunk_link\", \"secondary\", \"tertiary\", \"residential\", \"track\"))\n  \nlinewidths &lt;- data.frame(\n  highway = c(\"trunk\", \"trunk_link\", \"secondary\", \"tertiary\", \"residential\", \"track\"),\n  lwd = c(2, 1.8, 1.6, 1, 0.8, 0.5)\n)\n\nh &lt;- h |&gt;\n  dplyr::left_join(linewidths, by = \"highway\")\n\ntm &lt;- tmap::tm_shape(prusice_mun) +\n  tmap::tm_borders() +\n  tmap::tm_shape(h) +\n  tmap::tm_lines(\n    col = \"highway\",\n    lwd = \"lwd\",\n    col.legend = tmap::tm_legend(\n      position = c(\"left\", \"bottom\"),\n      bg.color = \"white\"\n    ),\n    lwd.legend = tmap::tm_legend(\n      show = FALSE\n    )\n  )\n\ntm\n\n\n\n\n\n\n\n\nFigure 2.15: Different roads classes in Prusice municipality based on OSM data\n\n\n\n\n\n\n\nFor those who prefer to use QGIS for styling and maps production, there is couple of resources to start with, including Anita’s Graser blog posts (underdark 2011a, 2011b, 2014). Look around and you will find nice examples.\nYou can use other tags associated with highways to check if it goes over bridge (bridge = yes or viaduct) or in tunnel (tunell = yes), what’s the max allowed speeds (various tags starting with maxspeed), what’s the road number (ref tag) or name, what’s the surface or smoothness, etc.\n\n2.4.1 Bike infrastructure\nIn OpenStreetMap database the roads designated for bicycle can be described in different ways. The lanes can be separate, can be part of highway, or shared with pedestrians (and in some countries even with other vehicles). Let’s have a quick overview of the used tags.\n\n\n\n\n\n\nWarning\n\n\n\nThis is non exhaustive list of all possible tags which can be used. For more information see wiki description of cycleway and bicycle infrastructure.\n\n\nSeparated ways for cycling usually are described as highway = cycleway, and in the field they are marked with white bicycle on blue background sign.7\nhighway = cycleway\n\n\n\nIf the cycling lane is shared with pedestrians, the usual tagging is:\nhighway = footway | path\nbicycle = designated\nfoot = designated\n\n\n       \nAnother possibility is to share the lane with cars on any highway (primary, tertiary, residential, etc). It can be the lane in the same or opposite direction. Tagging\nhighway = *\ncycleway = lane\n\n\n\n \nis used to tag two-way streets where there are cycle lanes on both sides of the road, or one-way streets where the lane operating in the same direction as main traffic flow. cycleway = opposite_lane is used for contraflow; cycleway = opposite + oneway:bicycle = no where cyclist are permitted to travel in both direction on one-way street. For shared lanes with motor vehicles: cycleway = shared_lane and cycleway=share_busway with buses. For more specific tagging please check wiki page.\nIn some countries additional tagging is in use. highway = * + bicycle_road = yes for signed roads and cyclestreet = yes for roads where other vehicles are allowed.8\n\n\n\n\nOther features\nBicycle shops are tagged with shop = bicycle, and those which provide additional repair services have service:bicycle:repair = yes tags. There might be a do-it-yourself service stations, equipped with pump, wrenches and other helpful tools — in such case they are tagged with amenity = bicycle_repair_station.\nBicycle parkings are tagged with amenity = bicycle_parking. In towns where you can rent a bike, you will find amenity = bicycle_rental tags.\n\n\nBicycle routes\n\nCycle routes or bicycle route are named or numbered or otherwise signed routes. May go along roads, trails or dedicated cycle paths.9\n\nThey are tagged as a relations (several features grouped together with relation roles assigned)10; they can be of different network levels: network = icn | ncn | rcn | lcn which corresponds to international route, a national, a regional or a local route. Below an example of tagging of part of EuroVelo 9 route:\ntype = route\nroute = bicycle\nnetwork = icn\nref = EV9\ncolour = green\nicn_ref = 9\nAs we already know and understand the attributes of the data, let’s play with it a bit. In next steps we will assess quantitatively the bicycle infrastructure in Leipzig, based on the data we already downloaded in Section 2.2.3.2.\nFirst step would be to extract points, lines and polygons related bo bike infrastructure and convert it to .gpkg file using osmextract::oe_vectortranslate() function.\n\n\nCode\nosmextract::oe_vectortranslate(\"data/bbbike_Leipzig.osm.pbf\", layer = \"points\",\n                               extra_tags = c(\"shop\", \"amenity\"))\n\nosmextract::oe_vectortranslate(\"data/bbbike_Leipzig.osm.pbf\", layer = \"multipolygons\",\n                               extra_tags = c(\"shop\", \"amenity\"))\n\nosmextract::oe_vectortranslate(\"data/bbbike_Leipzig.osm.pbf\", \n                               layer = \"lines\",\n                               extra_tags = c(\"highway\", \"cycleway\", \"bicycle\", \"foot\", \"vehicle\",\n                                              \"cycleway:both\", \"cycleway:left\", \"cycleway:right\", \n                                              \"bicycle_road\", \"cyclestreet\", \"oneway\", \"surface\",\n                                              \"network\", \"shop\", \"amenity\"))\n\nosmextract::oe_vectortranslate(\"data/bbbike_Leipzig.osm.pbf\", \n                               layer = \"multilinestrings\",\n                               extra_tags = c(\"network\"))\n\n\nHaving it prepared we can check what’s there:\n\nsf::st_layers(\"data/bbbike_Leipzig.gpkg\", do_count = TRUE)\n\nDriver: GPKG \nAvailable layers:\n        layer_name     geometry_type features fields\n1    multipolygons     Multi Polygon   574267     26\n2 multilinestrings Multi Line String     1427      5\n3           points             Point   264815     12\n4            lines       Line String   288025     23\n5         highways                     109257     14\n                             crs_name\n1                              WGS 84\n2                              WGS 84\n3                              WGS 84\n4                              WGS 84\n5 DHDN / 3-degree Gauss-Kruger zone 4\n\n\nAs the data provided by BBBike.org covers the whole bounding box surrounding Leipzig, we have to find a city boundary and cut off the data outside. We will read all lines, select particular columns, cut by boundary and store in the .gpkg file.\n\nleipzig_border &lt;- sf::st_read(\"data/bbbike_Leipzig.gpkg\",\n            query = \"SELECT name, geometry FROM multipolygons \\\n                      WHERE boundary = 'administrative' AND \\\n                      admin_level = 6 AND \\\n                      name = 'Leipzig'\") |&gt;\n  sf::st_transform(crs = \"EPSG:31468\")\n\n\nhw &lt;- sf::st_read(\"data/bbbike_Leipzig.gpkg\", layer = \"lines\") |&gt;\n  dplyr::select(\"osm_id\", \"name\", \"highway\", \"foot\",\n                starts_with(c(\"bicycle\", \"cycleway\")), \"oneway\", \n                \"surface\", \"vehicle\") |&gt;\n  sf::st_transform(crs = \"EPSG:31468\") |&gt;\n  sf::st_intersection(leipzig_border)\n\nsf::st_write(hw, dsn = \"data/bbbike_Leipzig.gpkg\", layer = \"highways\", append = FALSE)\n\nWith the highways prepared, we can run simple analysis: count the length of the roads for bikes, bikes + pedestrians, and cars only.\n\nbikes_only &lt;- hw |&gt;\n  subset(highway == \"cycleway\" | cycleway %in% c(\"lane\", \"track\", \"yes\") | bicycle == \"designated\" | !is.na((bicycle_road))) |&gt;\n  dplyr::summarise(geometry = sf::st_union(geometry)) |&gt;\n  dplyr::mutate(length = units::set_units(sf::st_length(geometry), \"km\"),\n                category = \"Bikes only\") |&gt;\n  sf::st_drop_geometry()\n\n\n\nCode\nbikes_ped &lt;- hw |&gt;\n  subset(highway %in% c(\"path\", \"footway\") & bicycle == \"designated\") |&gt;\n  dplyr::summarise(geometry = sf::st_union(geometry)) |&gt;\n  dplyr::mutate(length = units::set_units(sf::st_length(geometry), \"km\")) |&gt;\n  dplyr::mutate(category = \"Bikes + Pedestrians\") |&gt;\n  sf::st_drop_geometry()\n\ncars_only &lt;- hw |&gt;\n  subset(!is.na(highway) & !highway %in% c(\"cycleway\", \"path\", \"footway\")) |&gt;\n  subset(is.na(cycleway_left) | is.na(cycleway_right)) |&gt;\n  dplyr::summarise(geometry = sf::st_union(geometry)) |&gt;\n  dplyr::mutate(length = units::set_units(sf::st_length(geometry), \"km\")) |&gt;\n  dplyr::mutate(category = \"Cars only\") |&gt;\n  sf::st_drop_geometry()\n\nbikes_only |&gt;\n  rbind(bikes_ped) |&gt;\n  rbind(cars_only) |&gt;\n  dplyr::mutate(l = \"Total length\") |&gt;\n  tidyr::pivot_wider(names_from = category, values_from = length) |&gt;\n  dplyr::mutate(across(2:4, ~format(round(.x, 1), nsmall = 1))) |&gt;\n  kableExtra::kbl(booktabs = TRUE, escape = F, linesep = \"\",\n                  col.names = kableExtra::linebreak(c(\"\", \"Bikes only\",\n                                                      \"Bikes + Pedestrians\",\n                                                      \"Cars only\"), align = \"c\"),\n                  align = c(\"crrr\")) |&gt;\n  kableExtra::kable_classic_2()\n\n\n\n\nTable 2.7: Total length of roads by it’s type\n\n\n\n\n\n\n\n\nBikes only\nBikes + Pedestrians\nCars only\n\n\n\n\nTotal length\n367.7 [km]\n234.0 [km]\n3289.2 [km]\n\n\n\n\n\n\n\n\n\n\n\nIf you would like to split it by surface (asphalt, concrete, etc), then we can just group our highways by that column. Table 2.8 provides the data.\n\n\nCode\nopts &lt;- options(knitr.kable.NA = \"[ no data ]\")\n\nhw |&gt;\nsubset(highway == \"cycleway\" | cycleway %in% c(\"lane\", \"track\", \"yes\") | bicycle == \"designated\" | !is.na((bicycle_road))) |&gt;\n  dplyr::group_by(surface) |&gt;\n  dplyr::mutate(\n    surface = stringi::stri_replace_all_fixed(\n      surface, \n      pattern = \"_\", \n      replacement = \" \")) |&gt;\n  dplyr::summarise(geometry = sf::st_union(geometry)) |&gt;\n  dplyr::mutate(length = units::set_units(sf::st_length(geometry), \"km\")) |&gt; \n  sf::st_drop_geometry() |&gt;\n  units::drop_units() |&gt;\n  subset(length &gt;= 1) |&gt;\n  dplyr::arrange(dplyr::desc(length)) |&gt;\n  kableExtra::kbl(booktabs = TRUE, escape = FALSE, digits = 2, linesep = \"\",\n                  col.names = c(\"Surface\", \"Length [km]\"),\n                  align = c(\"lr\")) |&gt;\n  kableExtra::kable_classic_2()\n\n\n\n\nTable 2.8: Length of bike only roads by surface\n\n\n\n\n\n\n\nSurface\nLength [km]\n\n\n\n\nasphalt\n210.56\n\n\npaving stones\n54.15\n\n\n[ no data ]\n48.84\n\n\npaved\n20.07\n\n\ncompacted\n13.16\n\n\nfine gravel\n3.92\n\n\nconcrete:plates\n3.58\n\n\npebblestone\n3.11\n\n\nsett\n2.18\n\n\ngravel\n1.61\n\n\nconcrete\n1.38\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.16 visualizes road networks and it’s density.\n\n\n\n\n\n\n\n\n\n\n\n(a) for bikes\n\n\n\n\n\n\n\n\n\n\n\n(b) for cars\n\n\n\n\n\n\n\nFigure 2.16: Highways in Leipzig\n\n\n\n\n\n\n2.4.2 Routing and accessibility\nBut roads are not just lines on a map. It is also a network of connections that allow you to move from city to city, from one point to another. A network of connections that can be represented using graphs. It can be used both for routing and for analyzing the accessibility of various goods and resources: school, work or library.\nThere’s a lot of routing software on the market, both free and commercial, online and offline, which uses OSM and proprietary maps. The overview of those using OSM data can be found under https://wiki.openstreetmap.org/wiki/Routing/online_routers. Some of them provides API, which may be used in various tools (R, QGIS), some of them like BRouter integrates with different Android based map software (OSMAnd for example). There is a PostGIS/PostgreSQL pgRouting library which extends geospatial database capabilities by routing functionality with various algorithms.\n\n\n\n\n\n\n\nFigure 2.17: Example of routes generated by openroutingservice.org using QGIS ORS plugin for cars and bikes.\n\n\n\n\nORS provides isochrones as well. Isochrones reflect the area/extent that can be reached within a given period of time. They are typically used to visualize reachability analysis, which is one of the fundamental tasks in urban planning. It can be used to measure the service area covered by schools, hospitals (Reinmuth and Zipf, n.d.), fire brigades, restaurants (Benhlima et al. 2023) or train stations (Fazio et al. 2023). It is used to run multimodal transport analysis and to optimize public transport facilities (Bauer et al. 2008; Marciuska and Gamper 2010; Kondrateva, Sidorov, and Saprykin 2017). Figure 2.18 displays example of areas which can be reach-out by 3, 6, and 9 minutes from fire stations in Prusice municipality. The isochrones were provided by openroutingservice API using {openrouteservice} package (Oleś 2024).\n\n\nCode\nfire_stations &lt;- osmdata::opq(b, timeout = 60) |&gt; \n  osmdata::add_osm_feature(key = \"amenity\", value = \"fire_station\") |&gt;\n  osmdata::osmdata_sf()\n\nosp &lt;- fire_stations$osm_polygons[, \"amenity\" == \"fire_station\"] |&gt;\n  sf::st_centroid()\n\nosp &lt;- osp |&gt;\n  sf::st_transform(crs = sf::st_crs(prusice_mun)) |&gt;\n  sf::st_filter(prusice_mun, .predicate=sf::st_within)\n\nloc &lt;- osp |&gt;\n  sf::st_transform(crs = \"EPSG:4326\") |&gt;\n  sf::st_coordinates() |&gt;\n  sf::st_drop_geometry()\n\niso &lt;- openrouteservice::ors_isochrones(locations = loc, \n                                 range = c(3*60, 6*60, 9*60), \n                                 api_key = \"5b3ce3597851110001cf6248ec03277a4e17441bb853daa715874de4\",\n                                 output = \"sf\")\n\ntm +\n  tmap::tm_shape(iso) + \n  tmap::tm_polygons(\"value\", \n                    fill.scale = tmap::tm_scale_discrete(\n                      ticks = unique(iso$value)\n                    ),\n                    fill_alpha = 0.7,\n                    col = \"white\", col_alpha = 0,\n                    fill.legend = tmap::tm_legend(\n                      title = \"access in min\",\n                      labels = c(3, 6, 9),\n                      position = c(\"left\", \"top\"),\n                      bg.color = \"white\"\n                    ),\n  ) +\n  tmap::tm_shape(osp) +\n  tmap::tm_dots(size = 0.5)\n\n\n\n\n\n\n\n\nFigure 2.18: Areas reachable in 3, 6, and 9 minutes from fire stations in Prusice municipality.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>OpenStreetMap as a universal spatial data source</span>"
    ]
  },
  {
    "objectID": "osm.html#power-grid",
    "href": "osm.html#power-grid",
    "title": "2  OpenStreetMap as a universal spatial data source",
    "section": "2.5 Power grid",
    "text": "2.5 Power grid\nOSM is not just roads. There are several other features mapped, one of them is power grid. You can see the grid features mapped on Open Infrastructure Map.\n\n\nCode\noptions(knitr.kable.NA = '')\n\na &lt;- jsonlite::read_json(\"https://taginfo.openstreetmap.org/api/4/key/values?key=power&filter=all&lang=en&sortname=count&sortorder=desc&rp=10&page=1\", simplifyVector = TRUE)\na$data |&gt;\n  subset(select = c(value, count, fraction, description)) |&gt;\n  kableExtra::kable(digits = 2, \n                    format.args = list(decimal.mark = \".\", big.mark = \"\")) |&gt;\n  kableExtra::kable_classic_2()\n\n\n\n\nTable 2.9: 10 most popular power= values in OpenStreetMap\n\n\n\n\n\n\n\nvalue\ncount\nfraction\ndescription\n\n\n\n\ntower\n16089907\n0.46\nA tower or pylon carrying high voltage electricity cables. Often constructed from steel latticework but tubular or solid pylons are also used.\n\n\npole\n13189726\n0.37\nA single pole supporting power lines, often a wood, steel, or concrete mast designed to carry minor power lines.\n\n\ngenerator\n2508120\n0.07\nA device which converts one form of energy to another, for example, an electrical generator.\n\n\nline\n922709\n0.03\nHigh-voltage power lines used for power transmission, usually supported by towers or pylons\n\n\nminor_line\n883016\n0.03\nMinor power lines forming the distribution grid, usually carried by poles.\n\n\nsubstation\n661210\n0.02\nA facility which controls the flow of electricity in a power network with transformers, switchgear or compensators.\n\n\nportal\n195721\n0.01\nA supporting structure for power lines, composed of vertical legs with cables between them attached to a horizontal crossarm.\n\n\ntransformer\n180990\n0.01\nA device for stepping up or down electric voltage. Large power transformers are typically located inside substations\n\n\ncatenary_mast\n176976\n0.00\nA pole supporting the overhead wires used to supply electricity to vehicles equipped with a pantograph such as trams and trains\n\n\nswitch\n111941\n0.00\nA device which allows electrical network operators to power up & down lines and transformers in substations or along the power grid.\n\n\n\n\n\n\n\n\n\n\n\nThis section is inspired by OpenData StackExchange question. The queries are build around power tag. A very similar approach can be applied for oil and gas pipelines or other utilities. For details of usage see oil and gas infrastructure or pipeline tag.\n\n\nOther sources of open data for power transmission lines are listed on openmod.\n\n\nCode\nbbox &lt;- osmdata::getbb(\"Sweden\", featuretype = \"country\")\n\nsw &lt;- osmdata::opq(bbox, timeout = 60*30) |&gt;\n  osmdata::add_osm_feature(key = \"boundary\", value = \"administrative\") |&gt;\n  osmdata::add_osm_feature(key = \"admin_level\", value = \"2\") |&gt;\n  osmdata::add_osm_feature(key = \"name:en\", value = \"Sweden\") |&gt;\n  osmdata::osmdata_sf() |&gt;\n  osmdata::unique_osmdata() |&gt;\n  osmdata::unname_osmdata_sf()\n\nsw_boundary &lt;- sw$osm_multipolygons[sw$osm_multipolygons$`ISO3166-1` == \"SE\",][, c(\"name\", \"geometry\")]\n\np &lt;- osmdata::opq(bbox, timeout = 60*30) |&gt;\n  osmdata::add_osm_feature(key = \"power\") |&gt;\n  osmdata::osmdata_sf() |&gt;\n  osmdata::unique_osmdata()\n\ngrid &lt;- p$osm_lines |&gt;\n  subset(power %in% c(\"cable\", \"line\", \"minor_line\")) |&gt;\n  sf::st_filter(sw_boundary) |&gt;\n  subset(select = c(\"osm_id\", \"voltage\")) |&gt;\n  tidyr::separate_rows(voltage) |&gt;\n  dplyr::distinct(.keep_all = TRUE) |&gt;\n  dplyr::mutate(voltage = as.numeric(voltage)/10^3)\n\nsubstations &lt;- p$osm_polygons |&gt;\n  sf::st_filter(sw_boundary) |&gt;\n  subset(power == \"substation\") |&gt;\n  subset(select = c(\"osm_id\", \"power\", \"voltage\", \"name\")) |&gt;\n  tidyr::separate_rows(voltage) |&gt;\n  dplyr::distinct(.keep_all = TRUE) |&gt;\n  dplyr::mutate(voltage = as.numeric(voltage)/10^3)\n\nsubstations &lt;- p$osm_points |&gt;\n  sf::st_filter(sw_boundary) |&gt;\n  subset(power == \"substation\") |&gt;\n  subset(select = c(\"osm_id\", \"power\", \"voltage\", \"name\")) |&gt;\n  tidyr::separate_rows(voltage) |&gt;\n  dplyr::distinct(.keep_all = TRUE) |&gt;\n  dplyr::mutate(voltage = as.numeric(voltage)/10^3) |&gt;\n  rbind(substations)\n\ntmap::tm_shape(sw_boundary) +\n  tmap::tm_polygons(fill = \"gray95\") +\n  tmap::tm_shape(grid) +\n  tmap::tm_lines(\"voltage\", col.legend = tmap::tm_legend(title = \"Power grid [kV]\")) +\n  tmap::tm_shape(substations) +\n  tmap::tm_dots(size = 0.1)\n\n\n\n\n\n\n\n\nFigure 2.19: Power grid of Sweden\n\n\n\n\n\n\n\n\n\n\n\nBauer, Veronika, Johann Gamper, Roberto Loperfido, Sylvia Profanter, Stefan Putzer, and Igor Timko. 2008. “Computing Isochrones in Multi-Modal, Schedule-Based Transport Networks.” In Proceedings of the 16th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems, 1–2. GIS ’08. New York, NY, USA: Association for Computing Machinery. https://doi.org/b9xqfg.\n\n\nBenhlima, Ouidad, Fouad Riane, Jakob Puchinger, and Hicham Bahi. 2023. “An Isochronic Measurement for the Analysis of Proximity to Restaurants and Locations of Food Delivery Parking.” In The 9th International Conference on Modeling, Simulation and Applied Optimization (ICMSAO’23). Marrakech (Maroc), Morocco. https://hal.science/hal-04086908.\n\n\nBivand, Roger, Jakub Nowosad, and Robin Lovelace. 2023. spData: Datasets for Spatial Analysis. https://CRAN.R-project.org/package=spData.\n\n\nEstima, Jacinto, and Marco Painho. 2013. “Exploratory Analysis of OpenStreetMap for Land Use Classification.” In Proceedings of the Second ACM SIGSPATIAL International Workshop on Crowdsourced and Volunteered Geographic Information, 39–46. https://doi.org/10.1145/2534732.2534734.\n\n\n———. 2015. “Investigating the Potential of Openstreetmap for Land Use/Land Cover Production: A Case Study for Continental Portugal.” In OpenStreetMap in GIScience: Experiences, Research, and Applications, edited by Jamal Jokar Arsanjani, Alexander Zipf, Peter Mooney, and Marco Helbich, 273–93. Cham: Springer International Publishing. https://doi.org/10.1007/978-3-319-14280-7_14.\n\n\nFazio, Martina, Fabio Borghetti, Nadia Giuffrida, Michela Le Pira, Michela Longo, Matteo Ignaccolo, Giuseppe Inturri, and Roberto Maja. 2023. “The ‘15-Minutes Station’: A Case Study to Evaluate the Pedestrian Accessibility of Railway Transport in Southern Italy.” Transportation Research Procedia, AIIT 3rd International Conference on Transport Infrastructure and Systems (TIS ROMA 2022), 15th-16th September 2022, Rome, Italy, 69 (January): 536–43. https://doi.org/gtg74p.\n\n\nFonte, Cid’alia Costa, Joaquim Ant’onio Patriarca, Marco Minghini, Vyron Antoniou, Linda See, and Maria Antonia Brovelli. 2019. “Using OpenStreetMap to Create Land Use and Land Cover Maps: Development of an Application.” In Geospatial Intelligence: Concepts, Methodologies, Tools, and Applications (3 Volumes), edited by Information Resources Management Association, 1100–1123. Hershey PA, USA: IGI Global. https://www.igi-global.com/book/geospatial-intelligence-concepts-methodologies-tools/213224.\n\n\nGilardi, Andrea, and Robin Lovelace. 2023. Osmextract: Download and Import Open Street Map Data Extracts. https://CRAN.R-project.org/package=osmextract.\n\n\nGirres, Jean?François, and Guillaume Touya. 2010. “Quality Assessment of the French OpenStreetMap Dataset.” Transactions in GIS 14 (4): 435–59. https://doi.org/10.1111/j.1467-9671.2010.01203.x.\n\n\nHaklay, Mordechai. 2010. “How Good Is Volunteered Geographical Information? A Comparative Study of OpenStreetMap and Ordnance Survey Datasets.” Environment and Planning B: Planning and Design 37 (4): 682–703. https://doi.org/10.1068/b35097.\n\n\nHijmans, Robert J., M’arcia Barbosa, Aniruddha Ghosh, and Alex Mandel. 2023. Geodata: Download Geographic Data. https://CRAN.R-project.org/package=geodata.\n\n\nKondrateva, Elena, Alexander Sidorov, and Oleg Saprykin. 2017. “An Isochrones Based Public Transport Stops Optimization Technique.” In 2017 5th IEEE International Conference on Models and Technologies for Intelligent Transportation Systems (MT-ITS), 182–87. https://doi.org/gtg72p.\n\n\nKounadi, Ourania. 2009. “Assessing the Quality of OpenStreetMap Data.” London: University College of London, Department of Civil, Environmental And Geomatic Engineering.\n\n\nLudwig, Ina, Angi Voss, and Maike Krause-Traudes. 2011. “A Comparison of the Street Networks of Navteq and OSM in Germany.” In Advancing Geoinformation Science for a Changing World, 65–84. https://doi.org/10.1007/978-3-642-19789-5_4.\n\n\nMarciuska, Sarunas, and Johann Gamper. 2010. “Determining Objects Within Isochrones in Spatial Network Databases.” In Proceedings of the 14th East European Conference on Advances in Databases and Information Systems, 392–405. ADBIS’10. Berlin, Heidelberg: Springer-Verlag.\n\n\nMark Padgham, Bob Rudis, Robin Lovelace, and Maëlle Salmon. 2017. “Osmdata.” Journal of Open Source Software 2 (14): 305. https://doi.org/10.21105/joss.00305.\n\n\nMooney, Peter, Padraig Corcoran, and Adam Winstanley. 2010. “A Study of Data Representation of Natural Features in OpenStreetMap.” In. Zurich. https://giscience2010.org/.\n\n\nNeis, Pascal, Dennis Zielstra, and Alexander Zipf. 2011. “The Street Network Evolution of Crowdsourced Maps: OpenStreetMap in Germany 2007–2011.” Future Internet 4 (1): 1–21. https://doi.org/10.3390/fi4010001.\n\n\nOleś, Andrzej. 2024. Openrouteservice: Openrouteservice API Client. https://github.com/GIScience/openrouteservice-r.\n\n\nPebesma, Edzer, Thomas Mailund, and James Hiebert. 2016. “Measurement Units in R.” R Journal 8 (2): 486–94. https://doi.org/10.32614/RJ-2016-061.\n\n\n“Planet OSM.” 2024. 2024. https://planet.osm.org/.\n\n\nReinmuth, Marcel, and Alexander Zipf. n.d. “Physical Accessibility of Hospitals in Sub-Saharan Africa: An Exemplary Analysis of the Potential of Open Geodata in the Health Sector.”\n\n\nSchott, M., S. Lautenbach, L. Größchen, and A. Zipf. 2022. “Openstreetmap Element Vectorisation - a Tool for High Resolution Data Insights and Its Usability in the Land-Use and Land-Cover Domain.” The International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences XLVIII-4-W1-2022 (August): 395–402. https://doi.org/gtdww7.\n\n\nSchultz, Michael, Janek Voss, Michael Auer, Sarah Carter, and Alexander Zipf. 2017. “Open Land Cover from OpenStreetMap and Remote Sensing.” International Journal of Applied Earth Observation and Geoinformation 63 (December): 206–13. https://doi.org/gddfn6.\n\n\nShafee, Thomas, Os Keyes, and Serena Signorelli. 2021. WikidataR: Read-Write API Client Library for Wikidata. https://CRAN.R-project.org/package=WikidataR.\n\n\nSouth, Andy. 2017. Rnaturalearthdata: World Vector Map Data from Natural Earth Used in ’Rnaturalearth’. https://CRAN.R-project.org/package=rnaturalearthdata.\n\n\nTennekes, Martijn. 2018. “tmap: Thematic Maps in R.” Journal of Statistical Software 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\nunderdark. 2011a. “Guide to Advanced Labeling for OSM Roads.” Free and Open Source GIS Ramblings. September 13, 2011. https://anitagraser.com/2011/09/13/guide-to-advanced-labeling-for-osm-roads/.\n\n\n———. 2011b. “‘Google Maps’-Style Road Maps in QGIS.” Free and Open Source GIS Ramblings. September 16, 2011. https://anitagraser.com/2011/09/16/google-maps-styled-road-maps-in-qgis/.\n\n\n———. 2014. “A Guide to GoogleMaps-like Maps with OSM in QGIS.” Free and Open Source GIS Ramblings. May 31, 2014. https://anitagraser.com/2014/05/31/a-guide-to-googlemaps-like-maps-with-osm-in-qgis/.\n\n\nZielstra, Dennis, and Alexander Zipf. 2010. “Quantitative Studies on the Data Quality of OpenStreetMap in Germany.” In. https://www.semanticscholar.org/paper/Quantitative-Studies-on-the-Data-Quality-of-in-Zielstra-Zipf/1c1c90197c081de1b9cba3f53d2ead9906a1d730.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>OpenStreetMap as a universal spatial data source</span>"
    ]
  },
  {
    "objectID": "osm.html#footnotes",
    "href": "osm.html#footnotes",
    "title": "2  OpenStreetMap as a universal spatial data source",
    "section": "",
    "text": "replaced by ISO 19157:2013↩︎\nsee www.naturalearthdata.com↩︎\navailable on osmdata.openstreetmap.de↩︎\nYou can use dplyr::filter() as well.↩︎\nOther option would be load all fields including other_tags (which are like hstore type field in Postgresql) and then massage it a bit with tidyverse functions:\n  l &lt;- osmextract::oe_read(\"data/bbbike_Leipzig.gpkg\", \n         query = \"SELECT * FROM multipolygons WHERE boundary = 'postal_code'\")\n\n  l |&gt;\n    subset(select = other_tags) |&gt;\n    tidyr::separate_rows(other_tags, sep = \",\") |&gt;\n    tidyr::separate(other_tags, into = c(\"key\", \"value\"), sep = \"=&gt;\") |&gt;\n    dplyr::mutate_at(c(\"key\", \"value\"), stringr::str_remove_all, '\"') |&gt;\n    tidyr::pivot_wider(names_from = \"key\", values_from = \"value\")\n  \n↩︎\nIt’s a extension of GIS Stackexchange answer↩︎\nAll signs shared from Wikimedia commons. For similar signs in other European countries have a look on Comparison of European road signs.↩︎\nFor details see Key:bicycle_road↩︎\nhttps://wiki.openstreetmap.org/wiki/Cycle_routes↩︎\nhttps://wiki.openstreetmap.org/wiki/Relation↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>OpenStreetMap as a universal spatial data source</span>"
    ]
  },
  {
    "objectID": "environments.html",
    "href": "environments.html",
    "title": "3  Environmental data",
    "section": "",
    "text": "3.1 Land Cover and Land Use\nLand coverage and use was touched in Section 2.3, where the focus was mainly on OpenStreetMap data as a source. However there is more datasets available, based on satellite observations.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environmental data</span>"
    ]
  },
  {
    "objectID": "environments.html#sec-land_cover",
    "href": "environments.html#sec-land_cover",
    "title": "3  Environmental data",
    "section": "",
    "text": "3.1.1 ESA WorldCover\nEuropean Space Agency (ESA) released a freely accessible global land coverage data sets. These data sets are based on Sentinel-1 and Sentinel-2 data and contains 11 land cover classes with overall accuracy over 75%. The first set was released in 2021, the second, with higher quality, in 2022 (Zanaga et al. 2021, 2022). The data is accessible through AWS Open Data Registry, Zenodo and/or Terrascope. Terrascope provides the data as WM(T)S services as well, which can be used directly in QGIS:\n\nWMTS: https://services.terrascope.be/wmts/v2\nWMS: https://services.terrascope.be/wms/v2\n\n\n\nCode\nworldcover_file &lt;- \"data/WorldCover_PUM_V2.0.pdf\"\nif(!file.exists(worldcover_file)) {\n  worldcover_file &lt;- \"https://esa-worldcover.s3.eu-central-1.amazonaws.com/v200/2021/docs/WorldCover_PUM_V2.0.pdf\"  \n}\n\nt &lt;- tabulizer::extract_tables(file = worldcover_file,\n                               pages = 15,\n                               method = \"stream\",\n                               output = \"data.frame\")[[1]]\n\ncolnames(t) &lt;- c(\"map_code\", \"land_cover_class\", \"lccs_code\", \"definition\", \"color_code_rgb\")\nt &lt;- t[2:nrow(t),]\nt$map_code &lt;- as.numeric(t$map_code)\n\nmap_codes &lt;- t$map_code[!is.na(t$map_code)]\n\nmerge_cels &lt;- function(column = \"\", start = 10) {\n  stop &lt;- map_codes[which(map_codes == start)+1]\n  a &lt;- which(t$map_code == start)\n  if(is.na(stop)) {\n    b &lt;- nrow(t)\n  } else {\n    b &lt;- which(t$map_code == stop)-1\n  }\n  t[a:b, column] |&gt;\n    paste(collapse = \" \") |&gt;\n    stringr::str_trim()\n}\n\nn &lt;- t[1:11,] \n\nn$map_code &lt;- map_codes\n\nn &lt;- n |&gt;\n  dplyr::rowwise() |&gt;\n  dplyr::mutate(land_cover_class = merge_cels(column = \"land_cover_class\", start = map_code),\n                lccs_code = merge_cels(column = \"lccs_code\", start = map_code),\n                definition = merge_cels(column = \"definition\", start = map_code),\n                color_code_rgb = merge_cels(column = \"color_code_rgb\", start = map_code),\n                color = rgb(red = strsplit(color_code_rgb[[1]], split = \"[,]\")[[1]][1],\n                            green = strsplit(color_code_rgb[[1]], split = \"[,]\")[[1]][2],\n                            blue = strsplit(color_code_rgb[[1]], split = \"[,]\")[[1]][3],\n                            maxColorValue = 255)\n  )\n\n\nn[,1:5] |&gt;\n  kableExtra::kable(escape = FALSE,\n                    col.names = c(\"Map code\", \"Land cover class\",\n                                  \"LCCS code\", \"Definition\", \"Color code (RGB)\")) |&gt;\n  kableExtra::kable_classic_2() |&gt;\n  kableExtra::column_spec(5, background = n$color, width = \"12%\")\n\n\n\n\nTable 3.1: ESA WorldCover classes definition and color codes for layers (Van De Kerchove 2022)\n\n\n\n\n\n\n\nMap code\nLand cover class\nLCCS code\nDefinition\nColor code (RGB)\n\n\n\n\n10\nTree cover\nA12A3 // A11A1 A24A3C1(C2)- R1(R2)\nThis class includes any geographic area dominated by trees with a cover of 10% or more. Other land cover classes (shrubs and/or herbs in the understorey, built-up, permanent water bodies, ...) can be present below the canopy, even with a density higher than trees. Areas planted with trees for afforestation purposes and plantations (e.g. oil palm, olive trees) are included in this class. This class also includes tree covered areas seasonally or permanently flooded with fresh water except for mangroves.\n0,100,0\n\n\n20\nShrubland\nA12A4 // A11A2\nThis class includes any geographic area dominated by natural shrubs having a cover of 10% or more. Shrubs are defined as woody perennial plants with persistent and woody stems and without any defined main stem being less than 5 m tall. Trees can be present in scattered form if their cover is less than 10%. Herbaceous plants can also be present at any density. The shrub foliage can be either evergreen or deciduous.\n255, 187, 34\n\n\n30\nGrassland\nA12A2\nThis class includes any geographic area dominated by natural herbaceous plants (Plants without persistent stem or shoots above ground and lacking definite firm structure): (grasslands, prairies, steppes, savannahs, pastures) with a cover of 10% or more, irrespective of different human and/or animal activities, such as: grazing, selective fire management etc. Woody plants (trees and/or shrubs) can be present assuming their cover is less than 10%. It may also contain uncultivated cropland areas (without harvest/ bare soil period) in the reference year\n255, 255, 76\n\n\n40\nCropland\nA11A3(A4)(A5) // A23\nLand covered with annual cropland that is sowed/planted and harvestable at least once within the 12 months after the sowing/planting date. The annual cropland produces an herbaceous cover and is sometimes combined with some tree or woody vegetation. Note that perennial woody crops will be classified as the appropriate tree cover or shrub land cover type. Greenhouses are considered as built-up.\n240, 150, 255\n\n\n50\nBuilt-up\nB15A1\nLand covered by buildings, roads and other man-made structures such as railroads. Buildings include both residential and industrial building. Urban green (parks, sport facilities) is not included in this class. Waste dump deposits and extraction sites are considered as bare.\n250, 0, 0\n\n\n60\nBare / sparse vegetation\nB16A1(A2) // B15A2\nLands with exposed soil, sand, or rocks and never has more than 10 % vegetated cover during any time of the year\n180, 180, 180\n\n\n70\nSnow and Ice\nB28A2(A3)\nThis class includes any geographic area covered by snow or glaciers persistently\n240, 240, 240\n\n\n80\nPermanent water bodies\nB28A1(B1) // B27A1(B1)\nThis class includes any geographic area covered for most of the year (more than 9 months) by water bodies: lakes, reservoirs, and rivers. Can be either fresh or salt-water bodies. In some cases the water can be frozen for part of the year (less than 9 months).\n0, 100, 200\n\n\n90\nHerbaceous wetland\nA24A2\nLand dominated by natural herbaceous vegetation (cover of 10% or more) that is permanently or regularly flooded by fresh, brackish or salt water. It excludes unvegetated sediment (see 60), swamp forests (classified as tree cover) and mangroves see 95)\n0, 150, 160\n\n\n95\nMangroves\nA24A3C5-R3\nTaxonomically diverse, salt-tolerant tree and other plant species which thrive in intertidal zones of sheltered tropical shores, overwash islands, and estuaries.\n0, 207, 117\n\n\n100\nMoss and lichen\nA12A7\nLand covered with lichens and/or mosses. Lichens are composite organisms formed from the symbiotic association of fungi and algae. Mosses contain photo-autotrophic land plants without true leaves, stems, roots but with leaf-and stemlike organs.\n250, 230, 160\n\n\n\n\n\n\n\n\n\n\n\nThe data can be accessed from AWS using aws cli. To list the content of the storage you can use:\naws s3 ls --no-sign-request s3://esa-worldcover/\nand to sync it with local filesystem:\naws s3 sync --no-sign-request s3://esa-worldcover/v200/2021/map /local/path\nThe other option would be to mount it as a local file system using s3fs:\ns3fs esa-worldcover /local/path -o public_bucket=1\nThe data is available as TIFF raster tiles in a regular grid (EPSG:4326) with the ellipsoid WGS 1984 (Terrestrial radius=6378 km). The resolution of the grid is 1/12000\\(\\deg\\) corresponding to ~ 10 m at equator. The individual tile cover 3x3 degrees of longitude/latitude, and the filenames are in form:\nESA_WorldCover_10m_2021_v200_N06E012_Map.tif\nwhere NxxExxx (or SxxWxxx) corresponds to latitude (Nort or South) and longitude (West or East). The single file can be downloaded with:\naws s3 cp --no-sign-request s3://esa-worldcover/v200/2021/map/ESA_WorldCover_10m_2021_v200_N51E015_Map.tif /local/file.tif\nor from URL:\nhttps://esa-worldcover.s3.eu-central-1.amazonaws.com/v200/2021/map/ESA_WorldCover_10m_2021_v200_N51E015_Map.tif\nThe AWS buckets can be accessed with {aws.s3} package (Leeper 2024) however rasters can be accessed directly by rast() function from {terra} package (Hijmans 2024) thanks to underlying GDAL Virtual File Systems. First of all we can download FlatGeobuf file containing a layer with tile names and their corresponding polygons:\n\nesa_tiles &lt;- sf::st_read(\"https://esa-worldcover.s3.eu-central-1.amazonaws.com/esa_worldcover_grid.fgb\")\n\n\n\nSimple feature collection with 6 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 144 ymin: -57 xmax: 171 ymax: -42\nGeodetic CRS:  WGS 84\n  ll_tile                       geometry\n1 S54E168 POLYGON ((168 -54, 168 -51,...\n2 S54E165 POLYGON ((165 -54, 165 -51,...\n3 S57E159 POLYGON ((159 -57, 159 -54,...\n4 S57E156 POLYGON ((156 -57, 156 -54,...\n5 S45E144 POLYGON ((144 -45, 144 -42,...\n6 S45E147 POLYGON ((147 -45, 147 -42,...\n\n\n\n\n\n\n\n\n\n\nFigure 3.1: Spatial coverage of WorlCover data\n\n\n\n\n\nHaving tile names (column ll_tile in esa_tiles sf data frame) we can easy find a requested tile(s) by filtering the data frame by our area of interest. Below an example for land cover classes for my village and surroundings. The first step is to find bounding box of the village (getbb() from {osmdata}):\n\nl &lt;- osmdata::getbb(\"Lubnów, trzebnicki\", format_out = \"sf_polygon\")\n\nThe next step is to subset our esa_tiles data frame by l to find the tile(s) which intersects with. It can be done by simple subseting:\n\nb &lt;- esa_tiles[l, ,]\ntile_name &lt;- b[[1, \"ll_tile\"]]\ntile_name\n\n[1] \"N51E015\"\n\n\nor by st_filter() function\n\ntile_name &lt;- esa_tiles |&gt;\n  sf::st_filter(l) |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.character()\ntile_name\n\n[1] \"N51E015\"\n\n\nIn next step we have to get the proper raster, crop it to the village bounding box, (re)assign levels and table colors. Please note, the levels and colors corresponds to land cover classes and colors from Table 3.1.\n\nterra::setGDALconfig(\"AWS_NO_SIGN_REQUEST=YES\")\nurl &lt;- paste0(\"s3://esa-worldcover/v200/2021/map/ESA_WorldCover_10m_2021_v200_\", tile_name, \"_Map.tif\")\nr &lt;- terra::rast(url)\n\nw &lt;- terra::crop(r, terra::vect(l)) \n\nlevels(w) &lt;- n[c(\"map_code\", \"land_cover_class\")] |&gt;\n  as.data.frame()\nterra::coltab(w) &lt;- n[c(\"map_code\", \"color\")] |&gt;\n  as.data.frame()\n\nterra::plot(w)\n\n\n\n\n\n\n\n\nIt’s worth to mention that {geodata} package have landcover() function, which can download downsampled to 30-seconds per pixel rasters for specific land coverage class.\n\ngeodata::landcover(var = \"moss\", path = tempdir())",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environmental data</span>"
    ]
  },
  {
    "objectID": "environments.html#sec-climate",
    "href": "environments.html#sec-climate",
    "title": "3  Environmental data",
    "section": "3.2 Climate",
    "text": "3.2 Climate\nKey climatic variables are:\n\ntemperature (°C) (minimum, maximum, average, above ground or at 2 m height)\nprecipitation (mm),\nsolar radiation (kJ m-2 day-1),\nwind speed (m s-1),\nwater vapor (cm liquid water) and water vapor pressure (kPa),\nprobability of occurrence of snow, snow thickness (cm),\nsoil moisture (cm liquid water),\n\nThose data can be provided as point data sets (per station) or as gridded data sets obtained from analysis or modeling of the past and current climate data.\n\n3.2.1 Stations data\n\nIntegrated Surface Database\nThe Integrated Surface Database (ISD) (Smith, Lott, and Vose 2011; Del Greco et al. 2006; Lott 2004) is a global database that consists of hourly surface observations compiled from numerous sources into a single common ASCII format and common data model. It integrated data from numerous data sources and provides many parameters like temperature and dew point, wind speed and direction, precipitation etc. Data can be accessed from ncei.noaa.gov portal or directly from server where the data is divided by year, and for every station a gziped text file is provided. Data format, described in “Federal Climate Complex Data Documentation for Integrated Surface Data (ISD)” (2018), covers among others: date and time of observation, longitude, latitude and elevation of station, wind direction and speed, sky conditions, visibility distance, air temperature and dev point temperature, atmospheric pressure, precipitation and snow depth. Stations, coded like 040180-16201 can be translated to station names and their physical locations using isd-history.csv file.\n\n\nCode\nisd_stations &lt;- read.csv(\"https://www.ncei.noaa.gov/pub/data/noaa/isd-history.csv\")\n\nisd_stations |&gt;\n  dplyr::slice_sample(n = 10) |&gt;\n  kableExtra::kable() |&gt;\n  kableExtra::kable_classic_2()\n\n\n\n\nTable 3.2: A sample of ISD stations description file which can be used to translate station code to its location\n\n\n\n\n\n\n\nUSAF\nWBAN\nSTATION.NAME\nCTRY\nSTATE\nICAO\nLAT\nLON\nELEV.M.\nBEGIN\nEND\n\n\n\n\n577930\n99999\nYICHUN\nCH\n\n\n27.800\n114.383\n129.0\n19560820\n20240209\n\n\n749009\n99999\nRAF BLYTON\nUK\n\n\n53.467\n-0.700\n240.0\n19430301\n19430630\n\n\n103490\n99999\n\n\n\n\nNA\nNA\nNA\n19360508\n19431231\n\n\n043390\n99999\nSCORESBYSUND\nGL\n\nBGSC\n70.483\n-21.950\n69.0\n19360501\n20231014\n\n\n723425\n373\nHARRELL FIELD AIRPORT\nUS\nAR\nKCDH\n33.617\n-92.767\n40.2\n20070501\n20240210\n\n\n103710\n99999\n\n\n\n\nNA\nNA\nNA\n19400501\n19411231\n\n\n671980\n99999\nILE AMSTERDAM\nFS\n\n\n-37.833\n77.567\n28.0\n19500201\n20210502\n\n\n724455\n99999\nKIRKSVILLE RGNL\nUS\nMO\nKIRK\n40.083\n-92.533\n294.0\n20000101\n20031231\n\n\n999999\n26529\nTANANA RALPH M CALHOUN MEM AP\nUS\nAK\nPATA\n65.175\n-152.107\n67.1\n19480701\n19710311\n\n\n324080\n99999\nUST'-KAMCHATSK\nRS\n\n\n56.217\n162.717\n27.0\n19480101\n20240209\n\n\n\n\n\n\n\n\n\n\n\nThere is a {worldmet} (Carslaw 2023) package which can be used to find the appropriate stations and import the data. Let’s use it to find a stations close to coordinates 15.5°E, 51.5°N and extract the data for one of them:\n\na &lt;- worldmet::getMeta(lon = 15.5, lat = 51.5)\n\na[, c(1, 3, 6, 9:11, 15)]\n\n# A tibble: 10 × 7\n   usaf   station         call  `elev(m)` begin      end         dist\n   &lt;chr&gt;  &lt;chr&gt;           &lt;chr&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;date&gt;     &lt;dbl&gt;\n 1 124000 ZIELONA GORA    &lt;NA&gt;      192   1931-01-01 2024-02-09  48.2\n 2 124150 LEGNICA         &lt;NA&gt;      124   1937-04-01 2024-02-09  59.0\n 3 125000 JELENIA GORA    &lt;NA&gt;      344   1933-06-01 2024-02-09  69.9\n 4 123120 BABIMOST        EPZG       59.1 2002-06-03 2024-02-09  74.0\n 5 116530 SNEZKA          &lt;NA&gt;     1602   2009-05-01 2024-02-09  86.8\n 6 125100 SNIEZKA         &lt;NA&gt;     1613   1952-01-01 2024-02-09  86.8\n 7 116030 LIBEREC         &lt;NA&gt;      402.  1937-03-02 2024-02-09  88.2\n 8 116430 PEC POD SNEZKOU &lt;NA&gt;      821.  1931-01-01 2024-02-09  90.4\n 9 124240 STRACHOWICE     EPWR      123.  1939-01-02 2024-02-09 106. \n10 123100 SLUBICE         &lt;NA&gt;       24   1952-01-02 2024-02-09 113. \n\n\nBy adding returnMap = TRUE parameter we can see the locations of stations returned:\n\n\n\n\n\n\nLet’s download a data for one station and see what’s inside:\n\nstation_data &lt;- worldmet::importNOAA(code = \"124240-99999\",\n                     year = 2022,\n                     hourly = TRUE,\n                     n.cores = 4,\n                     path = \"data\")\n\nstation_data |&gt;\n  subset(select = c(3, 7:13)) |&gt;\n  tail()\n\n# A tibble: 6 × 8\n  date                   ws    wd air_temp atmos_pres visibility dew_point    RH\n  &lt;dttm&gt;              &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 2022-12-31 18:00:00  5.4   227.     15.5      1016.     23267.     10.0   70.0\n2 2022-12-31 19:00:00  5.43  234.     15.2      1016.     23267.      9.33  68.4\n3 2022-12-31 20:00:00  6.3   230      15.8      1016.     23267.      9.2   65.0\n4 2022-12-31 21:00:00  5.8   227.     15.1      1016.     23267.      9.1   67.7\n5 2022-12-31 22:00:00  4.07  224.     14.3      1016.     23267.      8.57  68.7\n6 2022-12-31 23:00:00  3.9   220.     14.0      1016.     23267.      8.17  68.0\n\n\nHaving data on hand we can perform analysis. A very simple wind rose and temperature diagram for Wrocław-Strachowice station is shown in Figure 3.2.\n\nCode\nopenair::windRose(station_data)\n\nopenair::timePlot(station_data, pollutant = \"air_temp\",\n                  auto.text = FALSE,\n                  ylab = \"Temperature [\\u00B0C]\",\n                  key = FALSE\n                  )\n\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\nFigure 3.2: Examples of station’s data vizualization: direction and wind speed (a) and temperature (b)\n\n\n\n\n\nMeteorological Aerodrome Report (METAR) data\nYou may have noticed in Table 3.2, some stations have ICAO (International Civil Aviation Organization) codes. It means, that such hourly data is provided by station located at airport. Copernicus airport at Wrocław-Strachowice is designated with EPWR. The data can be obtained from Aviation Weather Center, historical data is available from ogimet (up to past 20 years) or ASOS Network1. In R we can use {pmetar} package (Cwiek 2023).\n\nlibrary(pmetar)\nepwr &lt;- pmetar::metar_get(airport = \"EPWR\")\nepwr\n\n[1] \"EPWR 122000Z 26007KT CAVOK 07/04 Q1006\"\n\n\nFrom the above report we can read: it was issued on 12 day current month at 20:00 UTC. The wind was blowing from the direction of 260 degree and the speed was 7 knots, etc, etc (Milrad 2018).\n\n\nCode\nold &lt;- pmetar::metar_get_historical(airport = \"EPWR\",\n                             start_date = \"2022-12-30\",\n                             end_date = \"2022-12-31\") |&gt;\n  pmetar::metar_decode() \n\nold |&gt;\n  dplyr::mutate(date = as.POSIXct(paste(METAR_Date, \" \", Hour, \":00\"))) |&gt;\n  subset(select = c(date, Wind_speed, Wind_direction, Temperature, Pressure, Dew_point), \n         date &gt;= as.POSIXct(\"2022-12-31 18:00:00\")) |&gt;\n  kableExtra::kable() |&gt;\n  kableExtra::kable_classic_2()\n\n\n\n\nTable 3.3: Decoded METARs for Wrocław-Strachowice airport\n\n\n\n\n\n\n\ndate\nWind_speed\nWind_direction\nTemperature\nPressure\nDew_point\n\n\n\n\n2022-12-31 18:00:00\n5.144447\n220\n16\n1016\n10\n\n\n2022-12-31 18:30:00\n5.144447\n230; variable from 200 to 260\n15\n1016\n10\n\n\n2022-12-31 19:00:00\n4.630002\n230; variable from 200 to 260\n15\n1016\n9\n\n\n2022-12-31 19:30:00\n5.658892\n230\n15\n1016\n9\n\n\n2022-12-31 20:00:00\n6.173336\n230\n16\n1016\n9\n\n\n2022-12-31 20:30:00\n5.658892\n230\n16\n1016\n9\n\n\n2022-12-31 21:00:00\n5.658892\n230\n15\n1016\n9\n\n\n2022-12-31 21:30:00\n5.658892\n220\n15\n1016\n9\n\n\n2022-12-31 22:00:00\n4.630002\n230\n15\n1016\n9\n\n\n2022-12-31 22:30:00\n3.601113\n210; variable from 180 to 240\n14\n1016\n8\n\n\n2022-12-31 23:00:00\n4.115558\n210\n14\n1016\n8\n\n\n2022-12-31 23:30:00\n3.601113\n220\n14\n1016\n8\n\n\n\n\n\n\n\n\n\n\n\nComparing the data with ISD we can see the METAR reports are issued every 30 minutes.\n\n\n\n3.2.2 Gridded data\n\nCHELSA\nCHELSA (Climatologies at High resolution for the Earth’s Land Surface Areas) is a data set hosted by the Swiss Federal Institute for Forest, Snow and Landscape Research WSL. The data is based on ERA-Interim climatic reanalysis and contains downscaled to 30 arc sec, ~ 1 km global climate data. (Dirk Nikolaus Karger et al. 2017, 2021). Ver. 2.1 of the data covers monthly datasets of temperatures and precipitation climatologies for years 1979–2019.\nFiles can be accessed directly from Envicloud server. The filename of each CHELSA data product follows a similar structure including the respective model used, the variable short name, the respective time variables, and the accumulation (or mean) period in the following basic format:\nCHELSA_[short_name]_[timeperiod]_[Version].tif\nFor CMIP6 data:\nCHELSA_[short_name]_[timeperiod]_[model] _[ssp] _[Version].tif\nAvailable variable names are listed in Table 3.4. TREELIM model and details (variables: gsl, gsp ... fgd was described by Paulsen and Körner (2014). Köppen-Geiger kg0 and kg1 after Köppen (1936), kg2 classification was updated by Peel, Finlayson, and McMahon (2007), kg3 according to Wissmann (1939), kg4 — new classification by Thornthwaite (1931) and for details of kg5 see (Troll 1964). Miami model for npp variable was described by Lieth (1975).\n\n\n\n\nTable 3.4: Chelsa variable names (Dirk Nikolaus Karger and Zimmermann 2021)\n\n\n\n\n\n\n\nShort name\nLong name\nUnit\nScale\nOffset\nExplanation\n\n\n\n\nbio1\nmean annual air temperature\n°C\n0.1\n-273.15\nMean annual daily mean air temperatures averaged over 1 year\n\n\nbio2\nmean diurnal air temperature range\n°C\n0.1\n0.00\nMean diurnal range of temperatures averaged over 1 year\n\n\nbio3\nisothermality\n°C\n0.1\n0.00\nRatio of diurnal variation to annual variation in temperatures\n\n\nbio4\ntemperature seasonality\n°C\n0.1\n0.00\nStandard deviation of the monthly mean temperatures\n\n\nbio5\nmean daily maximum air temperature of the warmest month\n°C\n0.1\n-273.15\nThe highest temperature of any monthly daily mean maximum temperature\n\n\nbio6\nmean daily minimum air temperature of the coldest month\n°C\n0.1\n-273.15\nThe lowest temperature of any monthly daily mean maximum temperature\n\n\nbio7\nannual range of air temperature\n°C\n0.1\n0.00\nThe difference between the Maximum Temperature of Warmest month and the Minimum Temperature of Coldest month\n\n\nbio8\nmean daily mean air temperatures of the wettest quarter\n°C\n0.1\n-273.15\nThe wettest quarter of the year is determined (to the nearest month)\n\n\nbio9\nmean daily mean air temperatures of the driest quarter\n°C\n0.1\n-273.15\nThe driest quarter of the year is determined (to the nearest month)\n\n\nbio10\nmean daily mean air temperatures of the warmest quarter\n°C\n0.1\n-273.15\nThe warmest quarter of the year is determined (to the nearest month)\n\n\nbio11\nmean daily mean air temperatures of the coldest quarter\n°C\n0.1\n-273.15\nThe coldest quarter of the year is determined (to the nearest month)\n\n\nbio12\nannual precipitation amount\nkg m-2\n0.1\n0.00\nAccumulated precipitation amount over 1 year\n\n\nbio13\nprecipitation amount of the wettest month\nkg m-2\n0.1\n0.00\nThe precipitation of the wettest month.\n\n\nbio14\nprecipitation amount of the driest month\nkg m-2\n0.1\n0.00\nThe precipitation of the driest month.\n\n\nbio15\nprecipitation seasonality\nkg m-2\n0.1\n0.00\nThe Coefficient of Variation is the standard deviation of the monthly precipitation estimates expressed as a percentage of the mean of those estimates (i.e. the annual mean)\n\n\nbio16\nmean monthly precipitation amount of the wettest quarter\nkg m-2\n0.1\n0.00\nThe wettest quarter of the year is determined (to the nearest month)\n\n\nbio17\nmean monthly precipitation amount of the driest quarter\nkg m-2\n0.1\n0.00\nThe driest quarter of the year is determined (to the nearest month)\n\n\nbio18\nmean monthly precipitation amount of the warmest quarter\nkg m-2\n0.1\n0.00\nThe warmest quarter of the year is determined (to the nearest month)\n\n\nbio19\nmean monthly precipitation amount of the coldest quarter\nkg m-2\n0.1\n0.00\nThe coldest quarter of the year is determined (to the nearest month)\n\n\ngdgfgd0\nfirst growing degree day above 0°c\njulian day\n\n\nFirst day of the year above 0°C\n\n\ngdgfgd5\nfirst growing degree day above 5°c\njulian day\n\n\nFirst day of the year above 5°C\n\n\ngdgfgd10\nfirst growing degree day above 10°c\njulian day\n\n\nFirst day of the year above 10°C\n\n\nfcf\nfrost change frequency\ncount\n\n\nNumber of events in which tmin or tmax go above, or below 0°C\n\n\ngdd0\ngrowing degree days heat sum above 0°c\n°C\n0.1\n0.00\nHeat sum of all days above the 0°C temperature accumulated over 1 year.\n\n\ngdd5\ngrowing degree days heat sum above 5°c\n°C\n0.1\n0.00\nHeat sum of all days above the 5°C temperature accumulated over 1 year.\n\n\ngdd10\ngrowing degree days heat sum above 10°c\n°C\n0.1\n0.00\nHeat sum of all days above the 10°C temperature accumulated over 1 year.\n\n\ngddlgd0\nlast growing degree day above 0°c\njulian day\n\n\nLast day of the year above 0°C\n\n\ngddlgd5\nlast growing degree day above 5°c\njulian day\n\n\nLast day of the year above 5°C\n\n\ngddlgd10\nlast growing degree day above 10°c\njulian day\n\n\nLast day of the year above 10°C\n\n\ngsl\ngrowing season length treelim\nnumber of days\n\n\nLength of the growing season\n\n\ngsp\naccumulated precipiation amount on growing season days treelim\nkg m-2\n0.1\n0.00\nPrecipitation sum accumulated on all days during the growing season based on TREELIM ()\n\n\ngst\nmean temperature of the growing season treelim\n°C\n0.1\n-273.15\nMean temperature of all growing season days based on TREELIM ()\n\n\nlgd\nlast day of the growing season treelim\njulian day\n\n\nLast day of the growing season according to TREELIM ()\n\n\nfgd\nfirst day of the growing season treelim\njulian day\n\n\nFirst day of the growing season according to TREELIM ()\n\n\nngd0\nnumber of growing degree days\nnumber of days\n\n\nNumber of days at which tas &gt; 0°C\n\n\nngd5\nnumber of growing degree days\nnumber of days\n\n\nNumber of days at which tas &gt; 5°C\n\n\nngd10\nnumber of growing degree days\nnumber of days\n\n\nNumber of days at which tas &gt; 10°C\n\n\nkg0\nKöppen-Geiger climate classification\ncategory\n\n\nKöppen Geiger   Koeppen, W., Geiger, R. (1936): Handbuch der Klimatologie. Gebrüder Borntraeger, Berlin. Wikimedia.\n\n\nkg1\nKöppen-Geiger climate classification\ncategory\n\n\nKöppen Geiger without As/Aw differentiation   Koeppen, W., Geiger, R. (1936): Handbuch der Klimatologie. Gebrüder Borntraeger, Berlin. Wikimedia.\n\n\nkg2\nKöppen-Geiger climate classification\ncategory\n\n\nKöppen Geiger after Peel et al. 2007   Peel, M. C., Finlayson, B. L., McMahon, T. A. (2007): Updated world map of the Koeppen-Geiger climate classification. Hydrology and earth system sciences discussions, 4(2), 439-473. Free Access.\n\n\nkg3\nKöppen-Geiger climate classification\ncategory\n\n\nWissmann 1939   Wissmann, H. (1939): Die Klima-und Vegetationsgebiete Eurasiens: Begleitworte zu einer Karte der Klimagebiete Eurasiens. Z. Ges. Erdk. Berlin, p.81-92.\n\n\nkg4\nKöppen-Geiger climate classification\ncategory\n\n\nThornthwaite 1931   Thornthwaite, C. W. (1931): The climates of North America: according to a new classification. Geographical review, 21(4), 633-655. JSTOR.\n\n\nkg5\nKöppen-Geiger climate classification\ncategory\n\n\nTroll-Pfaffen   Troll, C. & Paffen, K.H. (1964): Karte der Jahreszeitenklimate der Erde. Erdkunde 18, p5-28 Free Access.\n\n\nscd\nsnow cover days\ncount\n\n\nNumber of days with snowcover calculated using the snowpack model implementation in from TREELIM ()\n\n\nswe\nsnow water equivalent\nkg m-2\n0.1\n0.00\nAmount of luquid water if snow is melted\n\n\nnpp\nnet primary productivity\ng C m-2 yr-1\n0.1\n0.00\nCalculated based on the ‘Miami model’, Lieth, H., 1972. “Modelling the primary productivity of the earth. Nature and resources”, UNESCO, VIII, 2:5-10.\n\n\npr\nprecipitation amount\nkg m-2\n0.1\n0.00\n“Amount” means mass per unit area. “Precipitation” in the earth’s atmosphere means precipitation of water in all phases.\n\n\ntasmax\nmean daily maximum 2m air temperature\n°C\n0.1\n-273.15\nDaily maximum air temperatures at 2 metres from hourly ERA5 data\n\n\ntas\nmean daily air temperature\n°C\n0.1\n-273.15\nDaily mean air temperatures at 2 metres from hourly ERA5 data\n\n\ntasmin\nmean daily minimum air temperature\n°C\n0.1\n-273.15\nDaily minimum air temperatures at 2 metres from hourly ERA5 data\n\n\n\n\n\n\n\n\n\n\n\nLater the data was extended by new variables and got the name BIOCLIM+ (Brun et al. 2022b, 2022a). The variables provides:\n\nnear-surface relative humidity (hurs)\ncloud area fraction (clt)\nnear-surface wind speed (sfcWind)\nvapour pressure deficit (vpd)\nsurface downwelling shortwave radiation (rsds)\npotential evapotranspiration (pet)\nclimate moisture index (cmi)\nsite water balance (swb)\n\nDetailed description of the variables were provided by Dirk Nikolaus Karger, Brun, and Zimmermann (2022).\nAnd finally, there is a daily sets of data (Dirk N. Karger et al. 2022) which covers the entire globe (except the Arctic Ocean beyond 84°N) at 30 arcsec horizontal and daily temporal resolution from 1979 to 2016. Variables (with short names and units in brackets) included in the CHELSA-W5E5 dataset are: Daily Mean Precipitation (pr) [kg m-2 s-1], Daily Mean Surface Downwelling Shortwave Radiation (rsds) [W m-2], Daily Mean Near-Surface Air Temperature (tas) [K], Daily Maximum Near Surface Air Temperature (tasmax) [K], Daily Minimum Near Surface Air Temperature (tasmin) [K], Surface Altitude (orog) [m], and the CHELSA-W5E5 land-sea mask (mask).\n\nTo download CHELSA data in R you can use {ClimDatDownloadR} (Jentsch, Bobrowski, and Weidinger 2024) or {climenv} (Tsakalos et al. 2024) packages.\n\n\nWorldClim\nWorldClim is a database of high spatial resolution global weather and climate data (Fick and Hijmans 2017). It contains monthly data: temperature (minimum, maximum and average), precipitation, solar radiation, vapour pressure and wind speed, aggregated across a target temporal range of 1970–2000. Historical climate data section covers 19 bioclimatic variables BIO1...BIO19. They are average for years 1970–2000. Historical monthly weather data covers monthly weather data for years 1960–2021 downscaled from (Harris et al. 2020). The spatial resolution is 2.5 minutes (~21 km2 at the equator), 5 minutes or 10 minutes. Each zip file contains 120 GeoTiff (.tif) files, for each month of the year (January is 1; December is 12), for a 10 year period. The variables available are average minimum temperature [°C], average maximum temperature [°C] and total precipitation [mm].\nTo download data in R you can use WorldClim.xxx set of functions in {ClimDatDownloadR} package or worldclim_xxx and cmip6_xxx sets of functions in {geodata} package (Hijmans et al. 2023). There is worldclim() function in {climenv} package as well, it uses geodata::worldclim_tile() function for download.\n\n\nERA5 hourly data\nERA5 is the fifth generation ECMWF reanalysis for the global climate and weather for the past 8 decades (Hersbach et al. 2020; Hersbach et al. 2023). Data is available from 1940 onwards with hourly temporal resolution. Horizontal resolution is 0.25 x 0.25° (atmosphere) and 0.5° x 0.5° (ocean waves). You can download it via Copernicus portal. There is a complementary data set named ERA5-Land (Muñoz-Sabater et al. 2021) covering time period from 1981 till today with spatial of 11 km and 1 hour temporal resolutions.\nThere are few packages which can be used to download the data: {KrigR} (Kusch and Davy 2022) and {ecmwfr} (Hufkens 2023; Hufkens, Stauffer, and Campitelli 2019). In below example, using {ecmwfr}, we are going to check weather conditions in April and May of 1945 in Remagen, Germany.2 After creating ECMWF account and setting up the key in keyring using wf_set_key()3 function we can create data request and download it.\n\nb &lt;- osmdata::getbb(\"Remagen, Germany\")\n\nremagen_lon &lt;- (b[1, 1] + b[1, 2])/2\nremagen_lat &lt;- (b[2, 1] + b[2, 2])/2\n\noptions(keyring_backend=\"file\")\n\nrequest &lt;- list(\n  product_type = \"reanalysis\",\n  variable = c(\"2m_temperature\", \"sea_surface_temperature\", \"total_precipitation\"),\n  year = \"1945\",\n  month = c(\"04\", \"05\"),\n  day = c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"),\n  time = c(\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"),\n  area = c(51, 7, 50, 8),\n  format = \"netcdf\",\n  dataset_short_name = \"reanalysis-era5-single-levels\",\n  target = \"download.nc\"\n)\n\nnc &lt;- ecmwfr::wf_request(\n  user = \"276798\",\n  time_out = 3600*10,\n  request = request,   \n  transfer = TRUE,  \n  path = \"data\",\n  verbose = TRUE\n)\n\nAfter executing such request you should see a message similar to below one:\nRequesting data to the cds service with username 276798\n- staging data transfer at url endpoint or request id:\n  26df01ad-2c4f-4b70-a568-e58ba43e7deb\n\n- timeout set to 10.0 hours\n- polling server for a data transfer\nDownloading file\n  |============================================================================| 100%\n- moved temporary file to -&gt; data/download.nc\n- Delete data from queue for url endpoint or request id:\n  https://cds.climate.copernicus.eu/api/v2/tasks/26df01ad-2c4f-4b70-a568-e58ba43e7deb\n\nPlease note that preparing the data on server side and downloading it might take a long while. Having the data downloaded we can run the analysis.\n\n\nCode\nK &lt;- -273.15\n\nm &lt;- matrix(c(\n  remagen_lon, remagen_lat),\n  byrow = TRUE, ncol = 2,\n  dimnames = list(c(\"rem\"),\n                  c(\"lon\", \"lat\")))\n\np &lt;- m |&gt;\n  terra::vect(m, type = \"points\", crs = \"EPSG:4326\")\n\nnc &lt;- \"data/download.nc\"\nr &lt;- terra::sds(nc)\n\ntemp2m &lt;- terra::extract(r[\"t2m\"], p, ID = TRUE, bind = TRUE) |&gt;\n  as.data.frame()\nt_timestamp &lt;- terra::time(r[\"t2m\"])\n\nf &lt;- t(temp2m)\nf &lt;- f[3:nrow(f), ]\nf &lt;- f + K\n\nf &lt;- f |&gt;\n  as.data.frame()\nf$t_timestamp &lt;- t_timestamp\n\ndaily_means &lt;- f |&gt;\n  dplyr::mutate(day = as.Date(t_timestamp)) |&gt;\n  dplyr::group_by(day) |&gt;\n  dplyr::summarise_at(\"f\", mean) |&gt;\n  dplyr::mutate(day = as.POSIXct(paste(day, \"00:00:00\")))\n\nplot(f$t_timestamp, f$f, type = \"l\",\n     lty = 3,\n     xlab = \"1945\",\n     ylab = expression(paste(\"Temperature [\",degree,\"C]\")),\n     )\nlines(daily_means$day, daily_means$f, lwd = 2, col = \"blue\")\nlegend(\"bottomright\",\n       legend = c(\"hourly\", \"daily mean\"),\n       col = c(\"black\", \"blue\"),\n       lty = c(3, 1),\n       lwd = c(1, 2)\n       )\n\n\n\n\n\n\n\n\nFigure 3.3: Temperature in Remagen, Germany during April and May 1945\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.4: Precipitation in Remagen, Germany during April and May 1945\n\n\n\n\n\n\n\nTerraClimate\nTerraClimate (Abatzoglou et al. 2018) is a dataset of monthly climate and climatic water balance for global terrestrial surfaces from 1958 to 2023. All data have monthly temporal resolution and a ~4-km (1/24th degree) spatial resolution.\nPrimary climate variables covers: maximum and minimum temperature, vapor pressure, precipitation accumulation, downward surface shortwave radiation and wind-speed. Derived variables are: reference evapotranspiration (ASCE Penman-Montieth), runoff, actual evapotranspiration, climate water deficit, soil moisture, snow water equivalent, palmer drought severity index and vapor pressure deficit. Detailed description is provided on Climatology Lab. The data is available as netCDF files from THREDDS web server.\n\n\nGlobal Maps from NASA Earth Observatory and other products\nEarth Observatory by NASA provides global monthly images at 10 km spatial resolution and covers years 2000-2022.\nMa, Zhou, Göttsche, Liang, Wang, and Li (2020) created global land surface temperature (LST) dataset, which was generated from NOAA advanced very-high-resolution radiometer (AVHRR) data (1981–2000) and includes three data layers:\n\ninstantaneous LST, a product generated by integrating several split-window algorithms with a random forest (RF-SWA)(Ma, Zhou, Göttsche, Liang, and Wang 2020);\norbital-drift-corrected (ODC) LST, a drift-corrected version of RF-SWA LST (Ma, Zhou, Liang, et al. 2020);\nmonthly averages of ODC LST (Ma, Zhou, and Liang 2020).\n\nThe resolution is 0.05° spatially and 1-day temporal. In addition to Zenodo, the data is available at http://glass.umd.edu/LST/ in HDF files.\nBased on ERA5 precipitation archive and MODIS monthly cloud cover frequency Dirk Nikolaus Karger, Wilson, et al. (2021) produced global daily 1km land surface precipitation set for the years 2003-2016. In 2021 Zhang et al. (2022) published land surface temperature dataset for 2003-2020 with 1km spatial resolution and on daily (mid-daytime and mid-nightime) basis. The dataset is based on MODIS LST and spatiotemporal gap-filling framework. The data is available for download from Iowa State University in GeoTIFF format. Another approach was taken by Yao et al. (2023) who produced global seamless and high-resolution (30 arcsecond spatial) temperature (with land surface temperature (Ts) and near-surface air temperature (Ta)) dataset for 2001-2020. The data is available at Middle Yangtze River Geoscience Date Center (in Chinese).\n\n\n\n\n\n\nAbatzoglou, John T., Solomon Z. Dobrowski, Sean A. Parks, and Katherine C. Hegewisch. 2018. “TerraClimate, a High-Resolution Global Dataset of Monthly Climate and Climatic Water Balance from 1958–2015.” Scientific Data 5 (1, 1): 170191. https://doi.org/10.1038/sdata.2017.191.\n\n\nBrun, Philipp, Niklaus E. Zimmermann, Chantal Hari, Loïc Pellissier, and Dirk Nikolaus Karger. 2022a. “CHELSA-BIOCLIM+ A Novel Set of Global Climate-Related Predictors at Kilometre-Resolution.” EnviDat. https://doi.org/http://dx.doi.org/10.16904/envidat.332.\n\n\n———. 2022b. “Global Climate-Related Predictors at Kilometer Resolution for the Past and Future.” Earth System Science Data 14 (12): 5573–603. https://doi.org/10.5194/essd-14-5573-2022.\n\n\nCarslaw, David. 2023. Worldmet: Import Surface Meteorological Data from NOAA Integrated Surface Database (ISD). https://CRAN.R-project.org/package=worldmet.\n\n\nCwiek, Pawel. 2023. Pmetar: Processing METAR Weather Reports. https://CRAN.R-project.org/package=pmetar.\n\n\nDel Greco, Stephen A., Neal Lott, Kathy Hawkins, Rich Baldwin, Dee Dee Anders, Ron Ray, Dan Dellinger, Pete Jones, and Fred Smith. 2006. “Surface Data Integration at NOAA’s National Climatic Data Center: Data Format, Processing, QC, and Product Generation.” In. Georgia. https://ams.confex.com/ams/Annual2006/webprogram/Paper100500.html.\n\n\n“Federal Climate Complex Data Documentation for Integrated Surface Data (ISD).” 2018. NOAA - National Centers for Environmental Information US Air Force - 14th Weather Squadron. https://www.ncei.noaa.gov/pub/data/noaa/isd-format-document.pdf.\n\n\nFick, Stephen E., and Robert J. Hijmans. 2017. “WorldClim 2: New 1-Km Spatial Resolution Climate Surfaces for Global Land Areas.” International Journal of Climatology 37 (12): 4302–15. https://doi.org/10.1002/joc.5086.\n\n\nHarris, Ian, Timothy J. Osborn, Phil Jones, and David Lister. 2020. “Version 4 of the CRU TS Monthly High-Resolution Gridded Multivariate Climate Dataset.” Scientific Data 7 (1, 1): 109. https://doi.org/10.1038/s41597-020-0453-3.\n\n\nHersbach, Hans, Bill Bell, Paul Berrisford, Gionata Biavati, András Horányi, Joaquín Muñoz Sabater, Julien Nicolas, et al. 2023. “ERA5 Hourly Data on Single Levels from 1940 to Present. Copernicus Climate Change Service (C3S) Climate Data Store (CDS).” https://doi.org/10.24381/cds.adbb2d47.\n\n\nHersbach, Hans, Bill Bell, Paul Berrisford, Shoji Hirahara, András Horányi, Joaquín Muñoz-Sabater, Julien Nicolas, et al. 2020. “The ERA5 Global Reanalysis.” Quarterly Journal of the Royal Meteorological Society 146 (730): 1999–2049. https://doi.org/10.1002/qj.3803.\n\n\nHijmans, Robert J. 2024. Terra: Spatial Data Analysis. https://rspatial.org/.\n\n\nHijmans, Robert J., M’arcia Barbosa, Aniruddha Ghosh, and Alex Mandel. 2023. Geodata: Download Geographic Data. https://CRAN.R-project.org/package=geodata.\n\n\nHufkens, Koen. 2023. Ecmwfr: Interface to ECMWF and CDS Data Web Services. https://github.com/bluegreen-labs/ecmwfr.\n\n\nHufkens, Koen, Reto Stauffer, and Elio Campitelli. 2019. “The Ecwmfr Package: An Interface to ECMWF API Endpoints.” https://doi.org/10.5281/zenodo.2647531.\n\n\nJentsch, Helge, Maria Bobrowski, and Johannes Weidinger. 2024. ClimDatDownloadR: Downloads Climate Data from Chelsa and WorldClim. https://doi.org/10.5281/zenodo.7924343.\n\n\nKarger, Dirk Nikolaus, Philipp Brun, and Niklaus E. Zimmermann. 2022. “BIOCLIM+ A Novel Set of Global Climate-Related Predictors at Kilometre-Resolution: Technical Specification.” Swiss Federal Research Institute WSL. https://www.envidat.ch/dataset/21d662b7-9c59-41da-aa82-7d8a879b8db7/resource/aa676d1f-5f7f-479b-af20-26066b0537d1/download/chelsa_file_specification_bioclim_plus.pdf.\n\n\nKarger, Dirk Nikolaus, Olaf Conrad, Jürgen Böhner, Tobias Kawohl, Holger Kreft, Rodrigo Wilber Soria-Auza, Niklaus E. Zimmermann, H. Peter Linder, and Michael Kessler. 2017. “Climatologies at High Resolution for the Earth’s Land Surface Areas.” Scientific Data 4 (1, 1): 170122. https://doi.org/10.1038/sdata.2017.122.\n\n\n———. 2021. “Climatologies at High Resolution for the Earth’s Land Surface Areas.” EnviDat. https://doi.org/http://dx.doi.org/10.16904/envidat.228.\n\n\nKarger, Dirk Nikolaus, Adam M. Wilson, Colin Mahony, Niklaus E. Zimmermann, and Walter Jetz. 2021. “Global Daily 1 Km Land Surface Precipitation Based on Cloud Cover-Informed Downscaling.” Scientific Data 8 (1, 1): 307. https://doi.org/10.1038/s41597-021-01084-6.\n\n\nKarger, Dirk Nikolaus, and Niklaus E. Zimmermann. 2021. “CHELSA V2.1: Technical Specification.” Swiss Federal Research Institute WSL. https://www.envidat.ch/dataset/2adb0c83-4653-4337-af28-f75c63ab7c74/resource/61fff0a7-6abb-45f7-a5f6-48f6e2c24851/download/chelsa_file_specification.pdf.\n\n\nKarger, Dirk N., Stefan Lange, Chantal Hari, Christopher P. O. Reyer, and Niklaus E. Zimmermann. 2022. “CHELSA-W5E5 V1.0: W5E5 V1.0 Downscaled with CHELSA V2.0.” ISIMIP Repository. https://doi.org/10.48364/ISIMIP.836809.3.\n\n\nKöppen, Wladimir Peter. 1936. “Das geographische System der Klimate (1936).” In Handbuch der Klimatologie, edited by Wladimir Peter Köppen and Rudolf Geiger, Band I, Teil C:44. Berlin: Verlag von Gebrüder Borntraeger. https://koeppen-geiger.vu-wien.ac.at/pdf/Koppen_1936.pdf.\n\n\nKusch, Erik, and Richard Davy. 2022. “KrigR—a Tool for Downloading and Statistically Downscaling Climate Reanalysis Data.” Environmental Research Letters 17 (2): 024005. https://doi.org/10.1088/1748-9326/ac48b3.\n\n\nLeeper, Thomas J. 2024. Aws.s3: AWS S3 Client Package. https://github.com/cloudyr/aws.s3.\n\n\nLieth, Helmut. 1975. “Modeling the Primary Productivity of the World.” In Primary Productivity of the Biosphere, edited by Helmut Lieth and Robert H. Whittaker, 14:237–63. Ecological Studies. Berlin, Heidelberg: Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-642-80913-2.\n\n\nLott, Neal. 2004. “The Quality Control of the Integrated Surface Hourly Database.” In. https://ams.confex.com/ams/84Annual/webprogram/Paper71929.html.\n\n\nMa, Jin, Ji Zhou, Frank-Michael Göttsche, Shunlin Liang, and Shaofei Wang. 2020. “GLASS Land Surface Temperature Product (1981-2000): Instantaneous LST.” Zenodo. https://doi.org/10.5281/zenodo.3934354.\n\n\nMa, Jin, Ji Zhou, Frank-Michael Göttsche, Shunlin Liang, Shaofei Wang, and Mingsong Li. 2020. “A Global Long-Term (1981–2000) Land Surface Temperature Product for NOAA AVHRR.” Earth System Science Data 12 (4): 3247–68. https://doi.org/10.5194/essd-12-3247-2020.\n\n\nMa, Jin, Ji Zhou, and Shunlin Liang. 2020. “GLASS Land Surface Temperature Product (1981-2000): Monthly Averaged LST.” Zenodo. https://doi.org/10.5281/zenodo.3936641.\n\n\nMa, Jin, Ji Zhou, Shunlin Liang, and Mingsong Li. 2020. “GLASS Land Surface Temperature Product (1981-2000): Orbital Drift Corrected LST.” Zenodo. https://doi.org/10.5281/zenodo.3936627.\n\n\nMilrad, Shawn. 2018. “METAR Code.” In Synoptic Analysis and Forecasting, edited by Shawn Milrad, 23–39. Elsevier. https://doi.org/10.1016/B978-0-12-809247-7.00003-X.\n\n\nMuñoz-Sabater, Joaquín, Emanuel Dutra, Anna Agustí-Panareda, Clément Albergel, Gabriele Arduini, Gianpaolo Balsamo, Souhail Boussetta, et al. 2021. “ERA5-Land: A State-of-the-Art Global Reanalysis Dataset for Land Applications.” Earth System Science Data 13 (9): 4349–83. https://doi.org/10.5194/essd-13-4349-2021.\n\n\nPaulsen, Jens, and Christian Körner. 2014. “A Climate-Based Model to Predict Potential Treeline Position Around the Globe.” Alpine Botany 124 (1): 1–12. https://doi.org/10.1007/s00035-014-0124-0.\n\n\nPeel, M. C., B. L. Finlayson, and T. A. McMahon. 2007. “Updated World Map of the Köppen-Geiger Climate Classification.” Hydrology and Earth System Sciences 11 (5): 1633–44. https://doi.org/10.5194/hess-11-1633-2007.\n\n\nSmith, Adam, Neal Lott, and Russ Vose. 2011. “The Integrated Surface Database: Recent Developments and Partnerships.” Bulletin of the American Meteorological Society 92 (6): 704–8. https://doi.org/10.1175/2011BAMS3015.1.\n\n\nThornthwaite, C. Warren. 1931. “The Climates of North America: According to a New Classification.” Geographical Review 21 (4): 633–55. https://doi.org/10.2307/209372.\n\n\nTroll, Carl. 1964. “Karte Der Jahreszeiten-Klimate Der Erde (The Map of the Seasonal Climates of the Earth).” Erdkunde 18 (1): 5–28. https://doi.org/10.3112/erdkunde.1964.01.02.\n\n\nTsakalos, James L., Martin R. Smith, Federico Luebert, and Ladislav Mucina. 2024. Climenv: Download, Extract and Visualise Climate and Elevation Data. https://github.com/jamestsakalos/climenv.\n\n\nVan De Kerchove, Ruben, ed. 2022. “WorldCover Product User Manual.” VITO. https://esa-worldcover.s3.eu-central-1.amazonaws.com/v200/2021/docs/WorldCover_PUM_V2.0.pdf.\n\n\nWissmann, Hermann von. 1939. “Die Klima-und Vegetationsgebiete Eurasiens: Begleitworte Zu Einer Karte Der Klimagebiete Eurasiens.” Zeitschrift Der Gesellschaft Für Erdkunde Zu Berlin, 81–92.\n\n\nYao, Rui, Lunche Wang, Xin Huang, Qian Cao, Jing Wei, Panxing He, Shaoqiang Wang, and Lizhe Wang. 2023. “Global Seamless and High-Resolution Temperature Dataset (GSHTD), 2001–2020.” Remote Sensing of Environment 286 (March): 113422. https://doi.org/10.1016/j.rse.2022.113422.\n\n\nZanaga, Daniele, Ruben Van De Kerchove, Dirk Daems, Wanda De Keersmaecker, Carsten Brockmann, Grit Kirches, Jan Wevers, et al. 2022. “ESA WorldCover 10 m 2021 V200.” Zenodo. October 28, 2022. https://doi.org/10.5281/zenodo.7254221.\n\n\nZanaga, Daniele, Ruben Van De Kerchove, Wanda De Keersmaecker, Niels Souverijns, Carsten Brockmann, Ralf Quast, Jan Wevers, et al. 2021. “ESA WorldCover 10 m 2020 V100.” Zenodo. October 20, 2021. https://doi.org/10.5281/zenodo.5571936.\n\n\nZhang, Tao, Yuyu Zhou, Zhengyuan Zhu, Xiaoma Li, and Ghassem R. Asrar. 2022. “A Global Seamless 1&thinsp;km Resolution Daily Land Surface Temperature Dataset (2003–2020).” Earth System Science Data 14 (2): 651–64. https://doi.org/10.5194/essd-14-651-2022.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environmental data</span>"
    ]
  },
  {
    "objectID": "environments.html#footnotes",
    "href": "environments.html#footnotes",
    "title": "3  Environmental data",
    "section": "",
    "text": "The Automated Surface Observing System↩︎\nThis is a response to Open Data question↩︎\nfor details please check package documentation↩︎",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Environmental data</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Abatzoglou, John T., Solomon Z. Dobrowski, Sean A. Parks, and Katherine\nC. Hegewisch. 2018. “TerraClimate, a High-Resolution\nGlobal Dataset of Monthly Climate and Climatic Water Balance from\n1958–2015.” Scientific Data 5 (1, 1): 170191. https://doi.org/10.1038/sdata.2017.191.\n\n\nBauer, Veronika, Johann Gamper, Roberto Loperfido, Sylvia Profanter,\nStefan Putzer, and Igor Timko. 2008. “Computing Isochrones in\nMulti-Modal, Schedule-Based Transport Networks.” In\nProceedings of the 16th ACM SIGSPATIAL International\nConference on Advances in Geographic Information\nSystems, 1–2. GIS ’08. New York, NY, USA:\nAssociation for Computing Machinery. https://doi.org/b9xqfg.\n\n\nBenhlima, Ouidad, Fouad Riane, Jakob Puchinger, and Hicham Bahi. 2023.\n“An Isochronic Measurement for the Analysis of Proximity to\nRestaurants and Locations of Food Delivery Parking.” In The\n9th International Conference on Modeling,\nSimulation and Applied Optimization\n(ICMSAO’23). Marrakech (Maroc), Morocco.\nhttps://hal.science/hal-04086908.\n\n\nBivand, Roger, Jakub Nowosad, and Robin Lovelace. 2023. spData:\nDatasets for Spatial Analysis. https://CRAN.R-project.org/package=spData.\n\n\nBrun, Philipp, Niklaus E. Zimmermann, Chantal Hari, Loïc Pellissier, and\nDirk Nikolaus Karger. 2022a. “CHELSA-BIOCLIM+\nA Novel Set of Global Climate-Related Predictors at\nKilometre-Resolution.” EnviDat. https://doi.org/http://dx.doi.org/10.16904/envidat.332.\n\n\n———. 2022b. “Global Climate-Related Predictors at Kilometer\nResolution for the Past and Future.” Earth System Science\nData 14 (12): 5573–603. https://doi.org/10.5194/essd-14-5573-2022.\n\n\nCarslaw, David. 2023. Worldmet: Import Surface Meteorological Data\nfrom NOAA Integrated Surface Database (ISD). https://CRAN.R-project.org/package=worldmet.\n\n\nCwiek, Pawel. 2023. Pmetar: Processing METAR Weather Reports.\nhttps://CRAN.R-project.org/package=pmetar.\n\n\nDel Greco, Stephen A., Neal Lott, Kathy Hawkins, Rich Baldwin, Dee Dee\nAnders, Ron Ray, Dan Dellinger, Pete Jones, and Fred Smith. 2006.\n“Surface Data Integration at NOAA’s National\nClimatic Data Center: Data Format, Processing, QC,\nand Product Generation.” In. Georgia. https://ams.confex.com/ams/Annual2006/webprogram/Paper100500.html.\n\n\nEstima, Jacinto, and Marco Painho. 2013. “Exploratory Analysis of\nOpenStreetMap for Land Use Classification.” In\nProceedings of the Second ACM SIGSPATIAL International\nWorkshop on Crowdsourced and Volunteered Geographic Information,\n39–46. https://doi.org/10.1145/2534732.2534734.\n\n\n———. 2015. “Investigating the Potential of\nOpenstreetmap for Land Use/Land Cover\nProduction: A Case Study for Continental\nPortugal.” In OpenStreetMap in\nGIScience: Experiences, Research,\nand Applications, edited by Jamal Jokar Arsanjani,\nAlexander Zipf, Peter Mooney, and Marco Helbich, 273–93.\nCham: Springer International Publishing. https://doi.org/10.1007/978-3-319-14280-7_14.\n\n\nFazio, Martina, Fabio Borghetti, Nadia Giuffrida, Michela Le Pira,\nMichela Longo, Matteo Ignaccolo, Giuseppe Inturri, and Roberto Maja.\n2023. “The ‘15-Minutes Station’: A Case Study to\nEvaluate the Pedestrian Accessibility of Railway Transport in\nSouthern Italy.” Transportation Research\nProcedia, AIIT 3rd International\nConference on Transport Infrastructure and\nSystems (TIS ROMA 2022), 15th-16th\nSeptember 2022, Rome, Italy, 69\n(January): 536–43. https://doi.org/gtg74p.\n\n\n“Federal Climate Complex Data Documentation for Integrated\nSurface Data (ISD).” 2018. NOAA -\nNational Centers for Environmental Information US Air Force - 14th\nWeather Squadron. https://www.ncei.noaa.gov/pub/data/noaa/isd-format-document.pdf.\n\n\nFick, Stephen E., and Robert J. Hijmans. 2017.\n“WorldClim 2: New 1-Km Spatial Resolution Climate\nSurfaces for Global Land Areas.” International Journal of\nClimatology 37 (12): 4302–15. https://doi.org/10.1002/joc.5086.\n\n\nFonte, Cid’alia Costa, Joaquim Ant’onio Patriarca, Marco Minghini, Vyron\nAntoniou, Linda See, and Maria Antonia Brovelli. 2019. “Using\nOpenStreetMap to Create Land Use and\nLand Cover Maps: Development of an\nApplication.” In Geospatial\nIntelligence: Concepts,\nMethodologies, Tools, and\nApplications (3 Volumes), edited by\nInformation Resources Management Association, 1100–1123. Hershey\nPA, USA: IGI Global. https://www.igi-global.com/book/geospatial-intelligence-concepts-methodologies-tools/213224.\n\n\nGilardi, Andrea, and Robin Lovelace. 2023. Osmextract: Download and\nImport Open Street Map Data Extracts. https://CRAN.R-project.org/package=osmextract.\n\n\nGirres, Jean?François, and Guillaume Touya. 2010. “Quality\nAssessment of the French OpenStreetMap Dataset.”\nTransactions in GIS 14 (4): 435–59. https://doi.org/10.1111/j.1467-9671.2010.01203.x.\n\n\nHaklay, Mordechai. 2010. “How Good Is Volunteered Geographical\nInformation? A Comparative Study of\nOpenStreetMap and Ordnance Survey Datasets.”\nEnvironment and Planning B: Planning and Design 37 (4):\n682–703. https://doi.org/10.1068/b35097.\n\n\nHarris, Ian, Timothy J. Osborn, Phil Jones, and David Lister. 2020.\n“Version 4 of the CRU TS Monthly High-Resolution\nGridded Multivariate Climate Dataset.” Scientific Data 7\n(1, 1): 109. https://doi.org/10.1038/s41597-020-0453-3.\n\n\nHersbach, Hans, Bill Bell, Paul Berrisford, Gionata Biavati, András\nHorányi, Joaquín Muñoz Sabater, Julien Nicolas, et al. 2023.\n“ERA5 Hourly Data on Single Levels from 1940 to\nPresent. Copernicus Climate Change Service\n(C3S) Climate Data Store\n(CDS).” https://doi.org/10.24381/cds.adbb2d47.\n\n\nHersbach, Hans, Bill Bell, Paul Berrisford, Shoji Hirahara, András\nHorányi, Joaquín Muñoz-Sabater, Julien Nicolas, et al. 2020. “The\nERA5 Global Reanalysis.” Quarterly Journal of\nthe Royal Meteorological Society 146 (730): 1999–2049. https://doi.org/10.1002/qj.3803.\n\n\nHijmans, Robert J. 2024. Terra: Spatial Data Analysis. https://rspatial.org/.\n\n\nHijmans, Robert J., M’arcia Barbosa, Aniruddha Ghosh, and Alex Mandel.\n2023. Geodata: Download Geographic Data. https://CRAN.R-project.org/package=geodata.\n\n\nHufkens, Koen. 2023. Ecmwfr: Interface to ECMWF and CDS Data Web\nServices. https://github.com/bluegreen-labs/ecmwfr.\n\n\nHufkens, Koen, Reto Stauffer, and Elio Campitelli. 2019. “The\nEcwmfr Package: An Interface to ECMWF API Endpoints.” https://doi.org/10.5281/zenodo.2647531.\n\n\nJentsch, Helge, Maria Bobrowski, and Johannes Weidinger. 2024.\nClimDatDownloadR: Downloads Climate Data from Chelsa and\nWorldClim. https://doi.org/10.5281/zenodo.7924343.\n\n\nKarger, Dirk Nikolaus, Philipp Brun, and Niklaus E. Zimmermann. 2022.\n“BIOCLIM+ A Novel Set of Global\nClimate-Related Predictors at Kilometre-Resolution:\nTechnical Specification.” Swiss Federal\nResearch Institute WSL. https://www.envidat.ch/dataset/21d662b7-9c59-41da-aa82-7d8a879b8db7/resource/aa676d1f-5f7f-479b-af20-26066b0537d1/download/chelsa_file_specification_bioclim_plus.pdf.\n\n\nKarger, Dirk Nikolaus, Olaf Conrad, Jürgen Böhner, Tobias Kawohl, Holger\nKreft, Rodrigo Wilber Soria-Auza, Niklaus E. Zimmermann, H. Peter\nLinder, and Michael Kessler. 2017. “Climatologies at High\nResolution for the Earth’s Land Surface Areas.” Scientific\nData 4 (1, 1): 170122. https://doi.org/10.1038/sdata.2017.122.\n\n\n———. 2021. “Climatologies at High Resolution for the Earth’s Land\nSurface Areas.” EnviDat. https://doi.org/http://dx.doi.org/10.16904/envidat.228.\n\n\nKarger, Dirk Nikolaus, Adam M. Wilson, Colin Mahony, Niklaus E.\nZimmermann, and Walter Jetz. 2021. “Global Daily 1 Km Land Surface\nPrecipitation Based on Cloud Cover-Informed Downscaling.”\nScientific Data 8 (1, 1): 307. https://doi.org/10.1038/s41597-021-01084-6.\n\n\nKarger, Dirk Nikolaus, and Niklaus E. Zimmermann. 2021.\n“CHELSA V2.1: Technical\nSpecification.” Swiss Federal Research Institute\nWSL. https://www.envidat.ch/dataset/2adb0c83-4653-4337-af28-f75c63ab7c74/resource/61fff0a7-6abb-45f7-a5f6-48f6e2c24851/download/chelsa_file_specification.pdf.\n\n\nKarger, Dirk N., Stefan Lange, Chantal Hari, Christopher P. O. Reyer,\nand Niklaus E. Zimmermann. 2022. “CHELSA-W5E5 V1.0:\nW5E5 V1.0 Downscaled with CHELSA V2.0.”\nISIMIP Repository. https://doi.org/10.48364/ISIMIP.836809.3.\n\n\nKondrateva, Elena, Alexander Sidorov, and Oleg Saprykin. 2017. “An\nIsochrones Based Public Transport Stops Optimization Technique.”\nIn 2017 5th IEEE International Conference on\nModels and Technologies for Intelligent\nTransportation Systems (MT-ITS), 182–87. https://doi.org/gtg72p.\n\n\nKöppen, Wladimir Peter. 1936. “Das geographische System der\nKlimate (1936).” In Handbuch der Klimatologie, edited by\nWladimir Peter Köppen and Rudolf Geiger, Band I, Teil C:44.\nBerlin: Verlag von Gebrüder Borntraeger. https://koeppen-geiger.vu-wien.ac.at/pdf/Koppen_1936.pdf.\n\n\nKounadi, Ourania. 2009. “Assessing the Quality of\nOpenStreetMap Data.” London:\nUniversity College of London, Department of Civil, Environmental\nAnd Geomatic Engineering.\n\n\nKusch, Erik, and Richard Davy. 2022. “KrigR—a Tool\nfor Downloading and Statistically Downscaling Climate Reanalysis\nData.” Environmental Research Letters 17 (2): 024005. https://doi.org/10.1088/1748-9326/ac48b3.\n\n\nLeeper, Thomas J. 2024. Aws.s3: AWS S3 Client Package. https://github.com/cloudyr/aws.s3.\n\n\nLieth, Helmut. 1975. “Modeling the Primary\nProductivity of the World.” In Primary\nProductivity of the Biosphere, edited by\nHelmut Lieth and Robert H. Whittaker, 14:237–63. Ecological\nStudies. Berlin, Heidelberg: Springer\nBerlin Heidelberg. https://doi.org/10.1007/978-3-642-80913-2.\n\n\nLott, Neal. 2004. “The Quality Control of the Integrated\nSurface Hourly Database.” In. https://ams.confex.com/ams/84Annual/webprogram/Paper71929.html.\n\n\nLudwig, Ina, Angi Voss, and Maike Krause-Traudes. 2011. “A\nComparison of the Street Networks of Navteq and OSM in\nGermany.” In Advancing Geoinformation Science for a Changing\nWorld, 65–84. https://doi.org/10.1007/978-3-642-19789-5_4.\n\n\nMa, Jin, Ji Zhou, Frank-Michael Göttsche, Shunlin Liang, and Shaofei\nWang. 2020. “GLASS Land Surface Temperature Product\n(1981-2000): Instantaneous LST.”\nZenodo. https://doi.org/10.5281/zenodo.3934354.\n\n\nMa, Jin, Ji Zhou, Frank-Michael Göttsche, Shunlin Liang, Shaofei Wang,\nand Mingsong Li. 2020. “A Global Long-Term (1981–2000) Land\nSurface Temperature Product for NOAA AVHRR.”\nEarth System Science Data 12 (4): 3247–68. https://doi.org/10.5194/essd-12-3247-2020.\n\n\nMa, Jin, Ji Zhou, and Shunlin Liang. 2020. “GLASS Land\nSurface Temperature Product (1981-2000): Monthly Averaged\nLST.” Zenodo. https://doi.org/10.5281/zenodo.3936641.\n\n\nMa, Jin, Ji Zhou, Shunlin Liang, and Mingsong Li. 2020.\n“GLASS Land Surface Temperature Product (1981-2000):\nOrbital Drift Corrected LST.” Zenodo.\nhttps://doi.org/10.5281/zenodo.3936627.\n\n\nMarciuska, Sarunas, and Johann Gamper. 2010. “Determining Objects\nWithin Isochrones in Spatial Network Databases.” In\nProceedings of the 14th East European Conference on\nAdvances in Databases and Information Systems,\n392–405. ADBIS’10. Berlin, Heidelberg:\nSpringer-Verlag.\n\n\nMark Padgham, Bob Rudis, Robin Lovelace, and Maëlle Salmon. 2017.\n“Osmdata.” Journal of Open Source Software 2 (14):\n305. https://doi.org/10.21105/joss.00305.\n\n\nMilrad, Shawn. 2018. “METAR Code.” In\nSynoptic Analysis and Forecasting,\nedited by Shawn Milrad, 23–39. Elsevier. https://doi.org/10.1016/B978-0-12-809247-7.00003-X.\n\n\nMooney, Peter, Padraig Corcoran, and Adam Winstanley. 2010. “A\nStudy of Data Representation of Natural Features in\nOpenStreetMap.” In. Zurich. https://giscience2010.org/.\n\n\nMuñoz-Sabater, Joaquín, Emanuel Dutra, Anna Agustí-Panareda, Clément\nAlbergel, Gabriele Arduini, Gianpaolo Balsamo, Souhail Boussetta, et al.\n2021. “ERA5-Land: A State-of-the-Art Global\nReanalysis Dataset for Land Applications.” Earth System\nScience Data 13 (9): 4349–83. https://doi.org/10.5194/essd-13-4349-2021.\n\n\nNeis, Pascal, Dennis Zielstra, and Alexander Zipf. 2011. “The\nStreet Network Evolution of Crowdsourced Maps:\nOpenStreetMap in Germany 2007–2011.” Future\nInternet 4 (1): 1–21. https://doi.org/10.3390/fi4010001.\n\n\nOleś, Andrzej. 2024. Openrouteservice: Openrouteservice API\nClient. https://github.com/GIScience/openrouteservice-r.\n\n\nPaulsen, Jens, and Christian Körner. 2014. “A Climate-Based Model\nto Predict Potential Treeline Position Around the Globe.”\nAlpine Botany 124 (1): 1–12. https://doi.org/10.1007/s00035-014-0124-0.\n\n\nPebesma, Edzer, Thomas Mailund, and James Hiebert. 2016.\n“Measurement Units in R.” R Journal 8\n(2): 486–94. https://doi.org/10.32614/RJ-2016-061.\n\n\nPeel, M. C., B. L. Finlayson, and T. A. McMahon. 2007. “Updated\nWorld Map of the Köppen-Geiger Climate\nClassification.” Hydrology and Earth System Sciences 11\n(5): 1633–44. https://doi.org/10.5194/hess-11-1633-2007.\n\n\n“Planet OSM.” 2024. 2024. https://planet.osm.org/.\n\n\nR Core Team. 2023. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nReinmuth, Marcel, and Alexander Zipf. n.d. “Physical Accessibility\nof Hospitals in Sub-Saharan Africa: An\nExemplary Analysis of the Potential of Open Geodata in the Health\nSector.”\n\n\nSchott, M., S. Lautenbach, L. Größchen, and A. Zipf. 2022.\n“Openstreetmap Element Vectorisation - a Tool for High Resolution\nData Insights and Its Usability in the Land-Use and Land-Cover\nDomain.” The International Archives of the Photogrammetry,\nRemote Sensing and Spatial Information Sciences XLVIII-4-W1-2022\n(August): 395–402. https://doi.org/gtdww7.\n\n\nSchultz, Michael, Janek Voss, Michael Auer, Sarah Carter, and Alexander\nZipf. 2017. “Open Land Cover from OpenStreetMap and\nRemote Sensing.” International Journal of Applied Earth\nObservation and Geoinformation 63 (December): 206–13. https://doi.org/gddfn6.\n\n\nShafee, Thomas, Os Keyes, and Serena Signorelli. 2021. WikidataR:\nRead-Write API Client Library for Wikidata. https://CRAN.R-project.org/package=WikidataR.\n\n\nSmith, Adam, Neal Lott, and Russ Vose. 2011. “The Integrated\nSurface Database: Recent Developments and\nPartnerships.” Bulletin of the American\nMeteorological Society 92 (6): 704–8. https://doi.org/10.1175/2011BAMS3015.1.\n\n\nSouth, Andy. 2017. Rnaturalearthdata: World Vector Map Data from\nNatural Earth Used in ’Rnaturalearth’. https://CRAN.R-project.org/package=rnaturalearthdata.\n\n\nTennekes, Martijn. 2018. “tmap:\nThematic Maps in R.” Journal of Statistical\nSoftware 84 (6): 1–39. https://doi.org/10.18637/jss.v084.i06.\n\n\nThornthwaite, C. Warren. 1931. “The Climates of\nNorth America: According to a New\nClassification.” Geographical Review 21 (4):\n633–55. https://doi.org/10.2307/209372.\n\n\nTroll, Carl. 1964. “Karte Der Jahreszeiten-Klimate\nDer Erde (The Map of the Seasonal\nClimates of the Earth).” Erdkunde 18\n(1): 5–28. https://doi.org/10.3112/erdkunde.1964.01.02.\n\n\nTsakalos, James L., Martin R. Smith, Federico Luebert, and Ladislav\nMucina. 2024. Climenv: Download, Extract and Visualise Climate and\nElevation Data. https://github.com/jamestsakalos/climenv.\n\n\nunderdark. 2011a. “Guide to Advanced Labeling for\nOSM Roads.” Free and Open Source GIS\nRamblings. September 13, 2011. https://anitagraser.com/2011/09/13/guide-to-advanced-labeling-for-osm-roads/.\n\n\n———. 2011b. “‘Google Maps’-Style\nRoad Maps in QGIS.” Free and Open\nSource GIS Ramblings. September 16, 2011. https://anitagraser.com/2011/09/16/google-maps-styled-road-maps-in-qgis/.\n\n\n———. 2014. “A Guide to GoogleMaps-like\nMaps with OSM in QGIS.” Free and\nOpen Source GIS Ramblings. May 31, 2014. https://anitagraser.com/2014/05/31/a-guide-to-googlemaps-like-maps-with-osm-in-qgis/.\n\n\nVan De Kerchove, Ruben, ed. 2022. “WorldCover Product User\nManual.” VITO. https://esa-worldcover.s3.eu-central-1.amazonaws.com/v200/2021/docs/WorldCover_PUM_V2.0.pdf.\n\n\nWissmann, Hermann von. 1939. “Die Klima-und\nVegetationsgebiete Eurasiens: Begleitworte Zu Einer\nKarte Der Klimagebiete Eurasiens.”\nZeitschrift Der Gesellschaft Für Erdkunde Zu Berlin, 81–92.\n\n\nYao, Rui, Lunche Wang, Xin Huang, Qian Cao, Jing Wei, Panxing He,\nShaoqiang Wang, and Lizhe Wang. 2023. “Global Seamless and\nHigh-Resolution Temperature Dataset (GSHTD),\n2001–2020.” Remote Sensing of Environment 286 (March):\n113422. https://doi.org/10.1016/j.rse.2022.113422.\n\n\nZanaga, Daniele, Ruben Van De Kerchove, Dirk Daems, Wanda De\nKeersmaecker, Carsten Brockmann, Grit Kirches, Jan Wevers, et al. 2022.\n“ESA WorldCover 10 m 2021 V200.”\nZenodo. October 28, 2022. https://doi.org/10.5281/zenodo.7254221.\n\n\nZanaga, Daniele, Ruben Van De Kerchove, Wanda De Keersmaecker, Niels\nSouverijns, Carsten Brockmann, Ralf Quast, Jan Wevers, et al. 2021.\n“ESA WorldCover 10 m 2020 V100.”\nZenodo. October 20, 2021. https://doi.org/10.5281/zenodo.5571936.\n\n\nZhang, Tao, Yuyu Zhou, Zhengyuan Zhu, Xiaoma Li, and Ghassem R. Asrar.\n2022. “A Global Seamless 1&thinsp;km Resolution Daily Land\nSurface Temperature Dataset (2003–2020).” Earth System\nScience Data 14 (2): 651–64. https://doi.org/10.5194/essd-14-651-2022.\n\n\nZielstra, Dennis, and Alexander Zipf. 2010. “Quantitative\nStudies on the Data Quality of\nOpenStreetMap in Germany.” In. https://www.semanticscholar.org/paper/Quantitative-Studies-on-the-Data-Quality-of-in-Zielstra-Zipf/1c1c90197c081de1b9cba3f53d2ead9906a1d730.",
    "crumbs": [
      "References"
    ]
  }
]